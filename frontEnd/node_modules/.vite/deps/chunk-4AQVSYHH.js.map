{
  "version": 3,
  "sources": ["browser-external:child_process", "../../@loaders.gl/loader-utils/dist/loader-types.js", "../../@loaders.gl/loader-utils/dist/lib/env-utils/assert.js", "../../@loaders.gl/loader-utils/dist/lib/env-utils/globals.js", "../../@probe.gl/env/src/lib/globals.ts", "../../@probe.gl/env/src/lib/is-electron.ts", "../../@probe.gl/env/src/lib/is-browser.ts", "../../@probe.gl/env/src/lib/get-browser.ts", "../../@probe.gl/env/src/index.ts", "../../@probe.gl/log/src/utils/local-storage.ts", "../../@probe.gl/log/src/utils/formatters.ts", "../../@probe.gl/log/src/utils/color.ts", "../../@probe.gl/log/src/utils/autobind.ts", "../../@probe.gl/log/src/utils/assert.ts", "../../@probe.gl/log/src/utils/hi-res-timestamp.ts", "../../@probe.gl/log/src/log.ts", "../../@probe.gl/log/src/init.ts", "../../@probe.gl/log/src/index.ts", "../../@loaders.gl/loader-utils/dist/lib/log-utils/log.js", "../../@loaders.gl/loader-utils/dist/lib/option-utils/merge-loader-options.js", "../../@loaders.gl/loader-utils/dist/lib/module-utils/js-module-utils.js", "../../@loaders.gl/worker-utils/dist/lib/env-utils/version.js", "../../@loaders.gl/worker-utils/dist/lib/env-utils/assert.js", "../../@loaders.gl/worker-utils/dist/lib/env-utils/globals.js", "../../@loaders.gl/worker-utils/dist/lib/worker-farm/worker-job.js", "../../@loaders.gl/worker-utils/dist/lib/node/worker_threads-browser.js", "../../@loaders.gl/worker-utils/dist/lib/worker-utils/get-loadable-worker-url.js", "../../@loaders.gl/worker-utils/dist/lib/worker-utils/get-transfer-list.js", "../../@loaders.gl/worker-utils/dist/lib/worker-farm/worker-thread.js", "../../@loaders.gl/worker-utils/dist/lib/worker-farm/worker-pool.js", "../../@loaders.gl/worker-utils/dist/lib/worker-farm/worker-farm.js", "../../@loaders.gl/worker-utils/dist/lib/worker-api/get-worker-url.js", "../../@loaders.gl/worker-utils/dist/lib/worker-api/process-on-worker.js", "../../@loaders.gl/worker-utils/dist/lib/worker-api/validate-worker-version.js", "../../@loaders.gl/worker-utils/dist/lib/library-utils/library-utils.js", "../../@loaders.gl/worker-utils/dist/lib/process-utils/child-process-proxy.js", "../../@loaders.gl/worker-utils/dist/lib/process-utils/process-utils.js", "../../@loaders.gl/loader-utils/dist/lib/worker-loader-utils/parse-with-worker.js", "../../@loaders.gl/loader-utils/dist/lib/worker-loader-utils/encode-with-worker.js", "../../@loaders.gl/loader-utils/dist/lib/binary-utils/get-first-characters.js", "../../@loaders.gl/loader-utils/dist/lib/parser-utils/parse-json.js", "../../@loaders.gl/loader-utils/dist/lib/binary-utils/array-buffer-utils.js", "../../@loaders.gl/loader-utils/dist/lib/binary-utils/memory-copy-utils.js", "../../@loaders.gl/loader-utils/dist/lib/iterators/text-iterators.js", "../../@loaders.gl/loader-utils/dist/lib/iterators/async-iteration.js", "../../@probe.gl/stats/src/utils/hi-res-timestamp.ts", "../../@probe.gl/stats/src/lib/stat.ts", "../../@probe.gl/stats/src/lib/stats.ts", "../../@loaders.gl/loader-utils/dist/lib/request-utils/request-scheduler.js", "../../@loaders.gl/loader-utils/dist/lib/path-utils/file-aliases.js", "../../@loaders.gl/loader-utils/dist/json-loader.js", "../../@loaders.gl/loader-utils/dist/lib/node/buffer.browser.js", "../../@loaders.gl/loader-utils/dist/lib/binary-utils/memory-conversion-utils.js", "../../@loaders.gl/loader-utils/dist/lib/path-utils/path.js", "../../@loaders.gl/loader-utils/dist/lib/path-utils/get-cwd.js", "../../@loaders.gl/loader-utils/dist/lib/files/blob-file.js", "../../@loaders.gl/loader-utils/dist/lib/files/node-file-facade.js", "../../@loaders.gl/loader-utils/dist/lib/filesystems/node-filesystem-facade.js", "../../@loaders.gl/loader-utils/dist/lib/sources/data-source.js", "../../@loaders.gl/loader-utils/dist/lib/sources/image-source.js", "../../@loaders.gl/core/dist/javascript-utils/is-type.js", "../../@loaders.gl/core/dist/lib/fetch/fetch-error.js", "../../@loaders.gl/core/dist/lib/utils/mime-type-utils.js", "../../@loaders.gl/core/dist/lib/utils/url-utils.js", "../../@loaders.gl/core/dist/lib/utils/resource-utils.js", "../../@loaders.gl/core/dist/lib/utils/response-utils.js", "../../@loaders.gl/core/dist/lib/fetch/fetch-file.js", "../../@loaders.gl/core/dist/lib/fetch/read-array-buffer.js", "../../@loaders.gl/core/dist/lib/loader-utils/loggers.js", "../../@loaders.gl/core/dist/lib/loader-utils/option-defaults.js", "../../@loaders.gl/core/dist/lib/loader-utils/option-utils.js", "../../@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js", "../../@loaders.gl/core/dist/lib/api/register-loaders.js", "../../@loaders.gl/core/dist/lib/api/select-loader.js", "../../@loaders.gl/core/dist/iterators/make-iterator/make-string-iterator.js", "../../@loaders.gl/core/dist/iterators/make-iterator/make-array-buffer-iterator.js", "../../@loaders.gl/core/dist/iterators/make-iterator/make-blob-iterator.js", "../../@loaders.gl/core/dist/iterators/make-iterator/make-stream-iterator.js", "../../@loaders.gl/core/dist/iterators/make-iterator/make-iterator.js", "../../@loaders.gl/core/dist/lib/loader-utils/get-data.js", "../../@loaders.gl/core/dist/lib/loader-utils/get-fetch-function.js", "../../@loaders.gl/core/dist/lib/loader-utils/loader-context.js", "../../@loaders.gl/core/dist/lib/api/parse.js", "../../@loaders.gl/core/dist/lib/api/parse-sync.js", "../../@loaders.gl/core/dist/lib/api/parse-in-batches.js", "../../@loaders.gl/core/dist/lib/api/load.js", "../../@loaders.gl/core/dist/lib/api/load-in-batches.js", "../../@loaders.gl/core/dist/lib/api/encode-table.js", "../../@loaders.gl/core/dist/lib/api/encode.js", "../../@loaders.gl/core/dist/lib/api/create-data-source.js", "../../@loaders.gl/core/dist/lib/api/select-source.js", "../../@loaders.gl/core/dist/iterators/make-stream/make-stream.js", "../../@loaders.gl/core/dist/null-loader.js", "../../@loaders.gl/core/dist/lib/progress/fetch-progress.js", "../../@loaders.gl/core/dist/lib/filesystems/browser-filesystem.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"child_process\" has been externalized for browser compatibility. Cannot access \"child_process.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\n// implementation signature\nexport async function parseFromContext(data, loaders, options, context) {\n    return context._parse(data, loaders, options, context);\n}\n/**\n * Parses `data` synchronously using the specified loader, parse function provided via the loader context\n */\nexport function parseSyncFromContext(data, loader, options, context) {\n    if (!context._parseSync) {\n        throw new Error('parseSync');\n    }\n    return context._parseSync(data, loader, options, context);\n}\n/**\n * Parses `data` synchronously using a specified loader, parse function provided via the loader context\n */\nexport async function parseInBatchesFromContext(data, loader, options, context) {\n    if (!context._parseInBatches) {\n        throw new Error('parseInBatches');\n    }\n    return context._parseInBatches(data, loader, options, context);\n}\n", "/**\n * Throws an `Error` with the optional `message` if `condition` is falsy\n * @note Replacement for the external assert method to reduce bundle size\n */\nexport function assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || 'loader assertion failed.');\n    }\n}\n", "// Purpose: include this in your module to avoid\n// dependencies on micro modules like 'global' and 'is-browser';\n/* eslint-disable no-restricted-globals */\nconst globals = {\n    self: typeof self !== 'undefined' && self,\n    window: typeof window !== 'undefined' && window,\n    global: typeof global !== 'undefined' && global,\n    document: typeof document !== 'undefined' && document\n};\nconst self_ = globals.self || globals.window || globals.global || {};\nconst window_ = globals.window || globals.self || globals.global || {};\nconst global_ = globals.global || globals.self || globals.window || {};\nconst document_ = globals.document || {};\nexport { self_ as self, window_ as window, global_ as global, document_ as document };\n/** true if running in a browser */\nexport const isBrowser = \n// @ts-ignore process does not exist on browser\nBoolean(typeof process !== 'object' || String(process) !== '[object process]' || process.browser);\n/** true if running in a worker thread */\nexport const isWorker = typeof importScripts === 'function';\n// Extract node major version\nconst matches = typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\n/** Major Node version (as a number) */\nexport const nodeVersion = (matches && parseFloat(matches[1])) || 0;\n", "// Do not name these variables the same as the global objects - will break bundling\nconst global_ = globalThis;\nconst window_ = globalThis as unknown as Window;\nconst document_ = globalThis.document || ({} as Document);\nconst process_ = globalThis.process || {};\nconst console_ = globalThis.console;\nconst navigator_ = globalThis.navigator || ({} as Navigator);\n\nexport {\n  global_ as global,\n  global_ as self,\n  window_ as window,\n  document_ as document,\n  process_ as process,\n  console_ as console,\n  navigator_ as navigator\n};\n", "// based on https://github.com/cheton/is-electron\n// https://github.com/electron/electron/issues/2288\n/* eslint-disable complexity */\nexport function isElectron(mockUserAgent?: string): boolean {\n  // Renderer process\n  // @ts-expect-error\n  if (typeof window !== 'undefined' && window.process?.type === 'renderer') {\n    return true;\n  }\n  // Main process\n  // eslint-disable-next-line\n  if (typeof process !== 'undefined' && Boolean(process.versions?.['electron'])) {\n    return true;\n  }\n  // Detect the user agent when the `nodeIntegration` option is set to true\n  const realUserAgent = typeof navigator !== 'undefined' && navigator.userAgent;\n  const userAgent = mockUserAgent || realUserAgent;\n  return Boolean(userAgent && userAgent.indexOf('Electron') >= 0);\n}\n", "// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n\nimport {isElectron} from './is-electron';\n\n/** Check if in browser by duck-typing Node context */\nexport function isBrowser(): boolean {\n  const isNode =\n    // @ts-expect-error\n    typeof process === 'object' && String(process) === '[object process]' && !process?.browser;\n  return !isNode || isElectron();\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n\nimport {isBrowser} from './is-browser';\nimport {isElectron} from './is-electron';\nimport {navigator} from './globals';\n\ndeclare global {\n  var chrome: boolean; // eslint-disable-line no-var\n  var safari: boolean; // eslint-disable-line no-var\n  var mozInnerScreenX: number; // eslint-disable-line no-var\n}\n\nexport function isMobile(): boolean {\n  return typeof globalThis.orientation !== 'undefined';\n}\n\n// Simple browser detection\n// `mockUserAgent` parameter allows user agent to be overridden for testing\n/* eslint-disable complexity */\nexport function getBrowser(\n  mockUserAgent?: string\n): 'Node' | 'Electron' | 'Chrome' | 'Firefox' | 'Safari' | 'Edge' | 'Unknown' {\n  if (!mockUserAgent && !isBrowser()) {\n    return 'Node';\n  }\n  if (isElectron(mockUserAgent)) {\n    return 'Electron';\n  }\n\n  const userAgent = mockUserAgent || navigator.userAgent || '';\n\n  // NOTE: Order of tests matter, as many agents list Chrome etc.\n  if (userAgent.indexOf('Edge') > -1) {\n    return 'Edge';\n  }\n  if (globalThis.chrome) {\n    return 'Chrome';\n  }\n  if (globalThis.safari) {\n    return 'Safari';\n  }\n  if (globalThis.mozInnerScreenX) {\n    return 'Firefox';\n  }\n  return 'Unknown';\n}\n", "// Extract injected version from package.json (injected by babel plugin)\n// @ts-expect-error\nexport const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\n// ENVIRONMENT\nexport {self, window, global, document, process, console} from './lib/globals';\nexport {isBrowser} from './lib/is-browser';\nexport {getBrowser, isMobile} from './lib/get-browser';\nexport {isElectron} from './lib/is-electron';\n\n// ENVIRONMENT'S ASSERT IS 5-15KB, SO WE PROVIDE OUR OWN\nexport {assert} from './utils/assert';\n\n// TODO - wish we could just export a constant\n// export const isBrowser = checkIfBrowser();\n", "// probe.gl, MIT license\n\nexport type StorageType = 'sessionStorage' | 'localStorage';\n\nfunction getStorage(type: StorageType): Storage | null {\n  try {\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport class LocalStorage<Configuration extends {}> {\n  storage: Storage | null;\n  id: string;\n  config: Required<Configuration>;\n\n  constructor(\n    id: string,\n    defaultConfig: Required<Configuration>,\n    type: StorageType = 'sessionStorage'\n  ) {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = defaultConfig;\n    this._loadConfiguration();\n  }\n\n  getConfiguration(): Required<Configuration> {\n    return this.config;\n  }\n\n  setConfiguration(configuration: Configuration): void {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n", "// probe.gl, MIT license\n\nexport type FormatValueOptions = {\n  isInteger?: boolean;\n  maxElts?: number;\n  size?: number;\n};\n\n/**\n * Format time\n */\nexport function formatTime(ms: number): string {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\nexport function formatValue(v: unknown, options: FormatValueOptions = {}): string {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = options;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, options);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n/** Helper to formatValue */\nfunction formatArrayValue(v: any, options: FormatValueOptions) {\n  const {maxElts = 16, size = 1} = options;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], options);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n", "import {isBrowser} from '@probe.gl/env';\n\nexport enum COLOR {\n  BLACK = 30,\n  RED = 31,\n  GREEN = 32,\n  YELLOW = 33,\n  BLUE = 34,\n  MAGENTA = 35,\n  CYAN = 36,\n  WHITE = 37,\n\n  BRIGHT_BLACK = 90,\n  BRIGHT_RED = 91,\n  BRIGHT_GREEN = 92,\n  BRIGHT_YELLOW = 93,\n  BRIGHT_BLUE = 94,\n  BRIGHT_MAGENTA = 95,\n  BRIGHT_CYAN = 96,\n  BRIGHT_WHITE = 97\n}\n\nconst BACKGROUND_INCREMENT = 10;\n\nfunction getColor(color: string | COLOR): number {\n  if (typeof color !== 'string') {\n    return color;\n  }\n  color = color.toUpperCase();\n  return COLOR[color] || COLOR.WHITE;\n}\n\nexport function addColor(\n  string: string,\n  color: string | COLOR,\n  background?: string | COLOR\n): string {\n  if (!isBrowser && typeof string === 'string') {\n    if (color) {\n      const colorCode = getColor(color);\n      string = `\\u001b[${colorCode}m${string}\\u001b[39m`;\n    }\n    if (background) {\n      // background colors values are +10\n      const colorCode = getColor(background);\n      string = `\\u001b[${colorCode + BACKGROUND_INCREMENT}m${string}\\u001b[49m`;\n    }\n  }\n  return string;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Binds the \"this\" argument of all functions on a class instance to the instance\n * @param obj - class instance (typically a react component)\n */\nexport function autobind(obj: object, predefined = ['constructor']): void {\n  const proto = Object.getPrototypeOf(obj);\n  const propNames = Object.getOwnPropertyNames(proto);\n\n  const object = obj as Record<string, unknown>;\n  for (const key of propNames) {\n    const value = object[key];\n    if (typeof value === 'function') {\n      if (!predefined.find((name) => key === name)) {\n        object[key] = value.bind(obj);\n      }\n    }\n  }\n}\n", "export default function assert(condition: unknown, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n", "// probe.gl, MIT license\n\nimport {window, process, isBrowser} from '@probe.gl/env';\n\n/** Get best timer available. */\nexport function getHiResTimestamp() {\n  let timestamp;\n  if (isBrowser() && window.performance) {\n    timestamp = window?.performance?.now?.();\n  } else if ('hrtime' in process) {\n    // @ts-ignore\n    const timeParts = process?.hrtime?.();\n    timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;\n  } else {\n    timestamp = Date.now();\n  }\n\n  return timestamp;\n}\n", "// probe.gl, MIT license\n\n/* eslint-disable no-console,prefer-rest-params */\nimport {VERSION, isBrowser} from '@probe.gl/env';\nimport {LocalStorage} from './utils/local-storage';\nimport {formatTime, leftPad} from './utils/formatters';\nimport {addColor} from './utils/color';\nimport {autobind} from './utils/autobind';\nimport assert from './utils/assert';\nimport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\n/** \"Global\" log configuration settings */\ntype LogConfiguration = {\n  enabled?: boolean;\n  level?: number;\n  [key: string]: unknown;\n};\n\n/** Options when logging a message */\ntype LogOptions = {\n  method?: Function;\n  time?: boolean;\n  total?: number;\n  delta?: number;\n  tag?: string;\n  message?: string;\n  once?: boolean;\n  nothrottle?: boolean;\n  args?: any;\n};\n\ntype LogFunction = () => void;\n\ntype Table = Record<string, any>;\n\n// Instrumentation in other packages may override console methods, so preserve them here\nconst originalConsole = {\n  debug: isBrowser() ? console.debug || console.log : console.log,\n  log: console.log,\n  info: console.info,\n  warn: console.warn,\n  error: console.error\n};\n\nconst DEFAULT_LOG_CONFIGURATION: Required<LogConfiguration> = {\n  enabled: true,\n  level: 0\n};\n\nfunction noop() {} // eslint-disable-line @typescript-eslint/no-empty-function\n\nconst cache = {};\nconst ONCE = {once: true};\n\n/** A console wrapper */\n\nexport class Log {\n  static VERSION = VERSION;\n\n  id: string;\n  VERSION: string = VERSION;\n  _startTs: number = getHiResTimestamp();\n  _deltaTs: number = getHiResTimestamp();\n  _storage: LocalStorage<LogConfiguration>;\n  userData = {};\n\n  // TODO - fix support from throttling groups\n  LOG_THROTTLE_TIMEOUT: number = 0; // Time before throttled messages are logged again\n\n  constructor({id} = {id: ''}) {\n    this.id = id;\n    this.userData = {};\n    this._storage = new LocalStorage<LogConfiguration>(\n      `__probe-${this.id}__`,\n      DEFAULT_LOG_CONFIGURATION\n    );\n\n    this.timeStamp(`${this.id} started`);\n\n    autobind(this);\n    Object.seal(this);\n  }\n\n  set level(newLevel: number) {\n    this.setLevel(newLevel);\n  }\n\n  get level(): number {\n    return this.getLevel();\n  }\n\n  isEnabled(): boolean {\n    return this._storage.config.enabled;\n  }\n\n  getLevel(): number {\n    return this._storage.config.level;\n  }\n\n  /** @return milliseconds, with fractions */\n  getTotal(): number {\n    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));\n  }\n\n  /** @return milliseconds, with fractions */\n  getDelta(): number {\n    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));\n  }\n\n  /** @deprecated use logLevel */\n  set priority(newPriority: number) {\n    this.level = newPriority;\n  }\n\n  /** @deprecated use logLevel */\n  get priority(): number {\n    return this.level;\n  }\n\n  /** @deprecated use logLevel */\n  getPriority(): number {\n    return this.level;\n  }\n\n  // Configure\n\n  enable(enabled: boolean = true): this {\n    this._storage.setConfiguration({enabled});\n    return this;\n  }\n\n  setLevel(level: number): this {\n    this._storage.setConfiguration({level});\n    return this;\n  }\n\n  /** return the current status of the setting */\n  get(setting: string): any {\n    return this._storage.config[setting];\n  }\n\n  // update the status of the setting\n  set(setting: string, value: any): void {\n    this._storage.setConfiguration({[setting]: value});\n  }\n\n  /** Logs the current settings as a table */\n  settings(): void {\n    if (console.table) {\n      console.table(this._storage.config);\n    } else {\n      console.log(this._storage.config);\n    }\n  }\n\n  // Unconditional logging\n\n  assert(condition: unknown, message?: string): asserts condition {\n    if (!condition) {\n      throw new Error(message || 'Assertion failed');\n    }\n  }\n\n  /** Warn, but only once, no console flooding */\n  warn(message: string, ...args: unknown[]): LogFunction;\n  warn(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);\n  }\n\n  /** Print an error */\n  error(message: string, ...args: unknown[]): LogFunction;\n  error(message: string): LogFunction {\n    return this._getLogFunction(0, message, originalConsole.error, arguments);\n  }\n\n  /** Print a deprecation warning */\n  deprecated(oldUsage: string, newUsage: string): LogFunction {\n    return this.warn(`\\`${oldUsage}\\` is deprecated and will be removed \\\nin a later version. Use \\`${newUsage}\\` instead`);\n  }\n\n  /** Print a removal warning */\n  removed(oldUsage: string, newUsage: string): LogFunction {\n    return this.error(`\\`${oldUsage}\\` has been removed. Use \\`${newUsage}\\` instead`);\n  }\n\n  // Conditional logging\n\n  /** Log to a group */\n  probe(logLevel, message?, ...args: unknown[]): LogFunction;\n  probe(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {\n      time: true,\n      once: true\n    });\n  }\n\n  /** Log a debug message */\n  log(logLevel, message?, ...args: unknown[]): LogFunction;\n  log(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);\n  }\n\n  /** Log a normal message */\n  info(logLevel, message?, ...args: unknown[]): LogFunction;\n  info(logLevel, message?): LogFunction {\n    return this._getLogFunction(logLevel, message, console.info, arguments);\n  }\n\n  /** Log a normal message, but only once, no console flooding */\n  once(logLevel, message?, ...args: unknown[]): LogFunction;\n  once(logLevel, message?) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      originalConsole.debug || originalConsole.info,\n      arguments,\n      ONCE\n    );\n  }\n\n  /** Logs an object as a table */\n  table(logLevel, table?, columns?): LogFunction {\n    if (table) {\n      return this._getLogFunction(\n        logLevel,\n        table,\n        console.table || noop,\n        (columns && [columns]) as unknown as IArguments,\n        {\n          tag: getTableHeader(table)\n        }\n      );\n    }\n    return noop;\n  }\n\n  time(logLevel, message) {\n    return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);\n  }\n\n  timeEnd(logLevel, message) {\n    return this._getLogFunction(\n      logLevel,\n      message,\n      console.timeEnd ? console.timeEnd : console.info\n    );\n  }\n\n  timeStamp(logLevel, message?) {\n    return this._getLogFunction(logLevel, message, console.timeStamp || noop);\n  }\n\n  group(logLevel, message, opts = {collapsed: false}) {\n    const options = normalizeArguments({logLevel, message, opts});\n    const {collapsed} = opts;\n    // @ts-expect-error\n    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;\n\n    return this._getLogFunction(options);\n  }\n\n  groupCollapsed(logLevel, message, opts = {}) {\n    return this.group(logLevel, message, Object.assign({}, opts, {collapsed: true}));\n  }\n\n  groupEnd(logLevel) {\n    return this._getLogFunction(logLevel, '', console.groupEnd || noop);\n  }\n\n  // EXPERIMENTAL\n\n  withGroup(logLevel: number, message: string, func: Function): void {\n    this.group(logLevel, message)();\n\n    try {\n      func();\n    } finally {\n      this.groupEnd(logLevel)();\n    }\n  }\n\n  trace(): void {\n    if (console.trace) {\n      console.trace();\n    }\n  }\n\n  // PRIVATE METHODS\n\n  /** Deduces log level from a variety of arguments */\n  _shouldLog(logLevel: unknown): boolean {\n    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);\n  }\n\n  _getLogFunction(\n    logLevel: unknown,\n    message?: unknown,\n    method?: Function,\n    args?: IArguments,\n    opts?: LogOptions\n  ): LogFunction {\n    if (this._shouldLog(logLevel)) {\n      // normalized opts + timings\n      opts = normalizeArguments({logLevel, message, args, opts});\n      method = method || opts.method;\n      assert(method);\n\n      opts.total = this.getTotal();\n      opts.delta = this.getDelta();\n      // reset delta timer\n      this._deltaTs = getHiResTimestamp();\n\n      const tag = opts.tag || opts.message;\n\n      if (opts.once && tag) {\n        if (!cache[tag]) {\n          cache[tag] = getHiResTimestamp();\n        } else {\n          return noop;\n        }\n      }\n\n      // TODO - Make throttling work with groups\n      // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {\n      //   return noop;\n      // }\n\n      message = decorateMessage(this.id, opts.message, opts);\n\n      // Bind console function so that it can be called after being returned\n      return method.bind(console, message, ...opts.args);\n    }\n    return noop;\n  }\n}\n\n/**\n * Get logLevel from first argument:\n * - log(logLevel, message, args) => logLevel\n * - log(message, args) => 0\n * - log({logLevel, ...}, message, args) => logLevel\n * - log({logLevel, message, args}) => logLevel\n */\nfunction normalizeLogLevel(logLevel: unknown): number {\n  if (!logLevel) {\n    return 0;\n  }\n  let resolvedLevel;\n\n  switch (typeof logLevel) {\n    case 'number':\n      resolvedLevel = logLevel;\n      break;\n\n    case 'object':\n      // Backward compatibility\n      // TODO - deprecate `priority`\n      // @ts-expect-error\n      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;\n      break;\n\n    default:\n      return 0;\n  }\n  // 'log level must be a number'\n  assert(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);\n\n  return resolvedLevel;\n}\n\n/**\n * \"Normalizes\" the various argument patterns into an object with known types\n * - log(logLevel, message, args) => {logLevel, message, args}\n * - log(message, args) => {logLevel: 0, message, args}\n * - log({logLevel, ...}, message, args) => {logLevel, message, args}\n * - log({logLevel, message, args}) => {logLevel, message, args}\n */\nexport function normalizeArguments(opts: {\n  logLevel;\n  message;\n  collapsed?: boolean;\n  args?: IArguments | undefined;\n  opts?;\n}): {\n  logLevel: number;\n  message: string;\n  args: any[];\n} {\n  const {logLevel, message} = opts;\n  opts.logLevel = normalizeLogLevel(logLevel);\n\n  // We use `arguments` instead of rest parameters (...args) because IE\n  // does not support the syntax. Rest parameters is transpiled to code with\n  // perf impact. Doing it here instead avoids constructing args when logging is\n  // disabled.\n  // TODO - remove when/if IE support is dropped\n  const args: any[] = opts.args ? Array.from(opts.args) : [];\n  // args should only contain arguments that appear after `message`\n  // eslint-disable-next-line no-empty\n  while (args.length && args.shift() !== message) {}\n\n  switch (typeof logLevel) {\n    case 'string':\n    case 'function':\n      if (message !== undefined) {\n        args.unshift(message);\n      }\n      opts.message = logLevel;\n      break;\n\n    case 'object':\n      Object.assign(opts, logLevel);\n      break;\n\n    default:\n  }\n\n  // Resolve functions into strings by calling them\n  if (typeof opts.message === 'function') {\n    opts.message = opts.message();\n  }\n  const messageType = typeof opts.message;\n  // 'log message must be a string' or object\n  assert(messageType === 'string' || messageType === 'object');\n\n  // original opts + normalized opts + opts arg + fixed up message\n  return Object.assign(opts, {args}, opts.opts);\n}\n\nfunction decorateMessage(id, message, opts) {\n  if (typeof message === 'string') {\n    const time = opts.time ? leftPad(formatTime(opts.total)) : '';\n    message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;\n    message = addColor(message, opts.color, opts.background);\n  }\n  return message;\n}\n\nfunction getTableHeader(table: Table): string {\n  for (const key in table) {\n    for (const title in table[key]) {\n      return title || 'untitled';\n    }\n  }\n  return 'empty';\n}\n", "// @ts-nocheck\n/* eslint-disable */\nglobalThis.probe = {};\n", "import {Log} from './log';\n\n// DEFAULT EXPORT IS A LOG INSTANCE\nexport default new Log({id: '@probe.gl/log'});\n\n// LOGGING\nexport {Log} from './log';\nexport {COLOR} from './utils/color';\n\n// UTILITIES\nexport {addColor} from './utils/color';\nexport {leftPad, rightPad} from './utils/formatters';\nexport {autobind} from './utils/autobind';\nexport {LocalStorage} from './utils/local-storage';\nexport {getHiResTimestamp} from './utils/hi-res-timestamp';\n\nimport './init';\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { Log } from '@probe.gl/log';\n// Version constant cannot be imported, it needs to correspond to the build version of **this** module.\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nexport const VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\nconst version = VERSION[0] >= '0' && VERSION[0] <= '9' ? `v${VERSION}` : '';\n// Make sure we set the global variable\nfunction createLog() {\n    const log = new Log({ id: 'loaders.gl' });\n    globalThis.loaders = globalThis.loaders || {};\n    globalThis.loaders.log = log;\n    globalThis.loaders.version = version;\n    globalThis.probe = globalThis.probe || {};\n    globalThis.probe.loaders = log;\n    return log;\n}\nexport const log = createLog();\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n *\n * @param baseOptions Can be undefined, in which case a fresh options object will be minted\n * @param newOptions\n * @returns\n */\nexport function mergeLoaderOptions(baseOptions, newOptions) {\n    return mergeOptionsRecursively(baseOptions || {}, newOptions);\n}\nfunction mergeOptionsRecursively(baseOptions, newOptions, level = 0) {\n    // Sanity check (jest test runner overwrites the console object which can lead to infinite recursion)\n    if (level > 3) {\n        return newOptions;\n    }\n    const options = { ...baseOptions };\n    for (const [key, newValue] of Object.entries(newOptions)) {\n        if (newValue && typeof newValue === 'object' && !Array.isArray(newValue)) {\n            options[key] = mergeOptionsRecursively(options[key] || {}, newOptions[key], level + 1);\n            // Object.assign(options[key] as object, newOptions[key]);\n        }\n        else {\n            options[key] = newOptions[key];\n        }\n    }\n    return options;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { log } from \"../log-utils/log.js\";\n/**\n * Register application-imported modules\n * These modules are typically to big to bundle, or may have issues on some bundlers/environments\n */\nexport function registerJSModules(modules) {\n    globalThis.loaders ||= {};\n    globalThis.loaders.modules ||= {};\n    Object.assign(globalThis.loaders.modules, modules);\n}\n/**\n * Get a pre-registered application-imported module, warn if not present\n */\nexport function checkJSModule(name, caller) {\n    const module = globalThis.loaders?.modules?.[name];\n    if (!module) {\n        log.warn(`${caller}: ${name} library not installed`)();\n    }\n}\n/**\n * Get a pre-registered application-imported module, throw if not present\n */\nexport function getJSModule(name, caller) {\n    const module = globalThis.loaders?.modules?.[name];\n    if (!module) {\n        throw new Error(`${caller}: ${name} library not installed`);\n    }\n    return module;\n}\n/**\n * Get a pre-registered application-imported module, return null if not present\n */\nexport function getJSModuleOrNull(name) {\n    const module = globalThis.loaders?.modules?.[name];\n    return module || null;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Version constant cannot be imported, it needs to correspond to the build version of **this** module.\n/**\n * TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\n * 'beta' on beta branch, 'latest' on prod branch\n */\nexport const NPM_TAG = 'latest';\nfunction getVersion() {\n    if (!globalThis._loadersgl_?.version) {\n        globalThis._loadersgl_ = globalThis._loadersgl_ || {};\n        // __VERSION__ is injected by babel-plugin-version-inline\n        if (typeof \"4.3.2\" === 'undefined') {\n            // eslint-disable-next-line\n            console.warn('loaders.gl: The __VERSION__ variable is not injected using babel plugin. Latest unstable workers would be fetched from the CDN.');\n            globalThis._loadersgl_.version = NPM_TAG;\n        }\n        else {\n            globalThis._loadersgl_.version = \"4.3.2\";\n        }\n    }\n    return globalThis._loadersgl_.version;\n}\nexport const VERSION = getVersion();\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\n/** Throws an `Error` with the optional `message` if `condition` is falsy */\nexport function assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || 'loaders.gl assertion failed.');\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Purpose: include this in your module to avoids adding dependencies on\n// micro modules like 'global' and 'is-browser';\n/* eslint-disable no-restricted-globals */\nconst globals = {\n    self: typeof self !== 'undefined' && self,\n    window: typeof window !== 'undefined' && window,\n    global: typeof global !== 'undefined' && global,\n    document: typeof document !== 'undefined' && document\n};\nconst self_ = globals.self || globals.window || globals.global || {};\nconst window_ = globals.window || globals.self || globals.global || {};\nconst global_ = globals.global || globals.self || globals.window || {};\nconst document_ = globals.document || {};\nexport { self_ as self, window_ as window, global_ as global, document_ as document };\n/** true if running in the browser, false if running in Node.js */\nexport const isBrowser = \n// @ts-ignore process.browser\ntypeof process !== 'object' || String(process) !== '[object process]' || process.browser;\n/** true if running on a worker thread */\nexport const isWorker = typeof importScripts === 'function';\n/** true if running on a mobile device */\nexport const isMobile = typeof window !== 'undefined' && typeof window.orientation !== 'undefined';\n// Extract node major version\nconst matches = typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\n/** Version of Node.js if running under Node, otherwise 0 */\nexport const nodeVersion = (matches && parseFloat(matches[1])) || 0;\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from \"../env-utils/assert.js\";\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n    name;\n    workerThread;\n    isRunning = true;\n    /** Promise that resolves when Job is done */\n    result;\n    _resolve = () => { };\n    _reject = () => { };\n    constructor(jobName, workerThread) {\n        this.name = jobName;\n        this.workerThread = workerThread;\n        this.result = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n    /**\n     * Send a message to the job's worker thread\n     * @param data any data structure, ideally consisting mostly of transferrable objects\n     */\n    postMessage(type, payload) {\n        this.workerThread.postMessage({\n            source: 'loaders.gl', // Lets worker ignore unrelated messages\n            type,\n            payload\n        });\n    }\n    /**\n     * Call to resolve the `result` Promise with the supplied value\n     */\n    done(value) {\n        assert(this.isRunning);\n        this.isRunning = false;\n        this._resolve(value);\n    }\n    /**\n     * Call to reject the `result` Promise with the supplied error\n     */\n    error(error) {\n        assert(this.isRunning);\n        this.isRunning = false;\n        this._reject(error);\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Browser polyfill for Node.js built-in `worker_threads` module.\n * These fills are non-functional, and just intended to ensure that\n * `import 'worker_threads` doesn't break browser builds.\n * The replacement is done in package.json browser field\n */\nexport class NodeWorker {\n    terminate() { }\n}\nexport const parentPort = null;\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from \"../env-utils/assert.js\";\nconst workerURLCache = new Map();\n/**\n * Creates a loadable URL from worker source or URL\n * that can be used to create `Worker` instances.\n * Due to CORS issues it may be necessary to wrap a URL in a small importScripts\n * @param props\n * @param props.source Worker source\n * @param props.url Worker URL\n * @returns loadable url\n */\nexport function getLoadableWorkerURL(props) {\n    assert((props.source && !props.url) || (!props.source && props.url)); // Either source or url must be defined\n    let workerURL = workerURLCache.get(props.source || props.url);\n    if (!workerURL) {\n        // Differentiate worker urls from worker source code\n        if (props.url) {\n            workerURL = getLoadableWorkerURLFromURL(props.url);\n            workerURLCache.set(props.url, workerURL);\n        }\n        if (props.source) {\n            workerURL = getLoadableWorkerURLFromSource(props.source);\n            workerURLCache.set(props.source, workerURL);\n        }\n    }\n    assert(workerURL);\n    return workerURL;\n}\n/**\n * Build a loadable worker URL from worker URL\n * @param url\n * @returns loadable URL\n */\nfunction getLoadableWorkerURLFromURL(url) {\n    // A local script url, we can use it to initialize a Worker directly\n    if (!url.startsWith('http')) {\n        return url;\n    }\n    // A remote script, we need to use `importScripts` to load from different origin\n    const workerSource = buildScriptSource(url);\n    return getLoadableWorkerURLFromSource(workerSource);\n}\n/**\n * Build a loadable worker URL from worker source\n * @param workerSource\n * @returns loadable url\n */\nfunction getLoadableWorkerURLFromSource(workerSource) {\n    const blob = new Blob([workerSource], { type: 'application/javascript' });\n    return URL.createObjectURL(blob);\n}\n/**\n * Per spec, worker cannot be initialized with a script from a different origin\n * However a local worker script can still import scripts from other origins,\n * so we simply build a wrapper script.\n *\n * @param workerUrl\n * @returns source\n */\nfunction buildScriptSource(workerUrl) {\n    return `\\\ntry {\n  importScripts('${workerUrl}');\n} catch (error) {\n  console.error(error);\n  throw error;\n}`;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// NOTE - there is a copy of this function is both in core and loader-utils\n// core does not need all the utils in loader-utils, just this one.\n/**\n * Returns an array of Transferrable objects that can be used with postMessage\n * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n * @param object data to be sent via postMessage\n * @param recursive - not for application use\n * @param transfers - not for application use\n * @returns a transfer list that can be passed to postMessage\n */\nexport function getTransferList(object, recursive = true, transfers) {\n    // Make sure that items in the transfer list is unique\n    const transfersSet = transfers || new Set();\n    if (!object) {\n        // ignore\n    }\n    else if (isTransferable(object)) {\n        transfersSet.add(object);\n    }\n    else if (isTransferable(object.buffer)) {\n        // Typed array\n        transfersSet.add(object.buffer);\n    }\n    else if (ArrayBuffer.isView(object)) {\n        // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)\n        // Do not iterate through the content in this case\n    }\n    else if (recursive && typeof object === 'object') {\n        for (const key in object) {\n            // Avoid perf hit - only go one level deep\n            getTransferList(object[key], recursive, transfersSet);\n        }\n    }\n    // If transfers is defined, is internal recursive call\n    // Otherwise it's called by the user\n    return transfers === undefined ? Array.from(transfersSet) : [];\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/Transferable\nfunction isTransferable(object) {\n    if (!object) {\n        return false;\n    }\n    if (object instanceof ArrayBuffer) {\n        return true;\n    }\n    if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n        return true;\n    }\n    if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n        return true;\n    }\n    // @ts-ignore\n    if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n        return true;\n    }\n    return false;\n}\n/**\n * Recursively drop non serializable values like functions and regexps.\n * @param object\n */\nexport function getTransferListForWriter(object) {\n    if (object === null) {\n        return {};\n    }\n    const clone = Object.assign({}, object);\n    Object.keys(clone).forEach((key) => {\n        // Typed Arrays and Arrays are passed with no change\n        if (typeof object[key] === 'object' &&\n            !ArrayBuffer.isView(object[key]) &&\n            !(object[key] instanceof Array)) {\n            clone[key] = getTransferListForWriter(object[key]);\n        }\n        else if (typeof clone[key] === 'function' || clone[key] instanceof RegExp) {\n            clone[key] = {};\n        }\n        else {\n            clone[key] = object[key];\n        }\n    });\n    return clone;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { NodeWorker } from \"../node/worker_threads.js\";\nimport { isBrowser } from \"../env-utils/globals.js\";\nimport { assert } from \"../env-utils/assert.js\";\nimport { getLoadableWorkerURL } from \"../worker-utils/get-loadable-worker-url.js\";\nimport { getTransferList } from \"../worker-utils/get-transfer-list.js\";\nconst NOOP = () => { };\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n    name;\n    source;\n    url;\n    terminated = false;\n    worker;\n    onMessage;\n    onError;\n    _loadableURL = '';\n    /** Checks if workers are supported on this platform */\n    static isSupported() {\n        return ((typeof Worker !== 'undefined' && isBrowser) ||\n            (typeof NodeWorker !== 'undefined' && !isBrowser));\n    }\n    constructor(props) {\n        const { name, source, url } = props;\n        assert(source || url); // Either source or url must be defined\n        this.name = name;\n        this.source = source;\n        this.url = url;\n        this.onMessage = NOOP;\n        this.onError = (error) => console.log(error); // eslint-disable-line\n        this.worker = isBrowser ? this._createBrowserWorker() : this._createNodeWorker();\n    }\n    /**\n     * Terminate this worker thread\n     * @note Can free up significant memory\n     */\n    destroy() {\n        this.onMessage = NOOP;\n        this.onError = NOOP;\n        this.worker.terminate(); // eslint-disable-line @typescript-eslint/no-floating-promises\n        this.terminated = true;\n    }\n    get isRunning() {\n        return Boolean(this.onMessage);\n    }\n    /**\n     * Send a message to this worker thread\n     * @param data any data structure, ideally consisting mostly of transferrable objects\n     * @param transferList If not supplied, calculated automatically by traversing data\n     */\n    postMessage(data, transferList) {\n        transferList = transferList || getTransferList(data);\n        // @ts-ignore\n        this.worker.postMessage(data, transferList);\n    }\n    // PRIVATE\n    /**\n     * Generate a standard Error from an ErrorEvent\n     * @param event\n     */\n    _getErrorFromErrorEvent(event) {\n        // Note Error object does not have the expected fields if loading failed completely\n        // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n        // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n        let message = 'Failed to load ';\n        message += `worker ${this.name} from ${this.url}. `;\n        if (event.message) {\n            message += `${event.message} in `;\n        }\n        // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n        // message += hasFilename ? event.filename : this.source.slice(0, 100);\n        if (event.lineno) {\n            message += `:${event.lineno}:${event.colno}`;\n        }\n        return new Error(message);\n    }\n    /**\n     * Creates a worker thread on the browser\n     */\n    _createBrowserWorker() {\n        this._loadableURL = getLoadableWorkerURL({ source: this.source, url: this.url });\n        const worker = new Worker(this._loadableURL, { name: this.name });\n        worker.onmessage = (event) => {\n            if (!event.data) {\n                this.onError(new Error('No data received'));\n            }\n            else {\n                this.onMessage(event.data);\n            }\n        };\n        // This callback represents an uncaught exception in the worker thread\n        worker.onerror = (error) => {\n            this.onError(this._getErrorFromErrorEvent(error));\n            this.terminated = true;\n        };\n        // TODO - not clear when this would be called, for now just log in case it happens\n        worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n        return worker;\n    }\n    /**\n     * Creates a worker thread in node.js\n     * @todo https://nodejs.org/api/async_hooks.html#async-resource-worker-pool\n     */\n    _createNodeWorker() {\n        let worker;\n        if (this.url) {\n            // Make sure relative URLs start with './'\n            const absolute = this.url.includes(':/') || this.url.startsWith('/');\n            const url = absolute ? this.url : `./${this.url}`;\n            // console.log('Starting work from', url);\n            worker = new NodeWorker(url, { eval: false });\n        }\n        else if (this.source) {\n            worker = new NodeWorker(this.source, { eval: true });\n        }\n        else {\n            throw new Error('no worker');\n        }\n        worker.on('message', (data) => {\n            // console.error('message', data);\n            this.onMessage(data);\n        });\n        worker.on('error', (error) => {\n            // console.error('error', error);\n            this.onError(error);\n        });\n        worker.on('exit', (code) => {\n            // console.error('exit', code);\n        });\n        return worker;\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isMobile, isBrowser } from \"../env-utils/globals.js\";\nimport WorkerThread from \"./worker-thread.js\";\nimport WorkerJob from \"./worker-job.js\";\n/**\n * Process multiple data messages with small pool of identical workers\n */\nexport default class WorkerPool {\n    name = 'unnamed';\n    source; // | Function;\n    url;\n    maxConcurrency = 1;\n    maxMobileConcurrency = 1;\n    onDebug = () => { };\n    reuseWorkers = true;\n    props = {};\n    jobQueue = [];\n    idleQueue = [];\n    count = 0;\n    isDestroyed = false;\n    /** Checks if workers are supported on this platform */\n    static isSupported() {\n        return WorkerThread.isSupported();\n    }\n    /**\n     * @param processor - worker function\n     * @param maxConcurrency - max count of workers\n     */\n    constructor(props) {\n        this.source = props.source;\n        this.url = props.url;\n        this.setProps(props);\n    }\n    /**\n     * Terminates all workers in the pool\n     * @note Can free up significant memory\n     */\n    destroy() {\n        // Destroy idle workers, active Workers will be destroyed on completion\n        this.idleQueue.forEach((worker) => worker.destroy());\n        this.isDestroyed = true;\n    }\n    setProps(props) {\n        this.props = { ...this.props, ...props };\n        if (props.name !== undefined) {\n            this.name = props.name;\n        }\n        if (props.maxConcurrency !== undefined) {\n            this.maxConcurrency = props.maxConcurrency;\n        }\n        if (props.maxMobileConcurrency !== undefined) {\n            this.maxMobileConcurrency = props.maxMobileConcurrency;\n        }\n        if (props.reuseWorkers !== undefined) {\n            this.reuseWorkers = props.reuseWorkers;\n        }\n        if (props.onDebug !== undefined) {\n            this.onDebug = props.onDebug;\n        }\n    }\n    async startJob(name, onMessage = (job, type, data) => job.done(data), onError = (job, error) => job.error(error)) {\n        // Promise resolves when thread starts working on this job\n        const startPromise = new Promise((onStart) => {\n            // Promise resolves when thread completes or fails working on this job\n            this.jobQueue.push({ name, onMessage, onError, onStart });\n            return this;\n        });\n        this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n        return await startPromise;\n    }\n    // PRIVATE\n    /**\n     * Starts first queued job if worker is available or can be created\n     * Called when job is started and whenever a worker returns to the idleQueue\n     */\n    async _startQueuedJob() {\n        if (!this.jobQueue.length) {\n            return;\n        }\n        const workerThread = this._getAvailableWorker();\n        if (!workerThread) {\n            return;\n        }\n        // We have a worker, dequeue and start the job\n        const queuedJob = this.jobQueue.shift();\n        if (queuedJob) {\n            // Emit a debug event\n            // @ts-ignore\n            this.onDebug({\n                message: 'Starting job',\n                name: queuedJob.name,\n                workerThread,\n                backlog: this.jobQueue.length\n            });\n            // Create a worker job to let the app access thread and manage job completion\n            const job = new WorkerJob(queuedJob.name, workerThread);\n            // Set the worker thread's message handlers\n            workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);\n            workerThread.onError = (error) => queuedJob.onError(job, error);\n            // Resolve the start promise so that the app can start sending messages to worker\n            queuedJob.onStart(job);\n            // Wait for the app to signal that the job is complete, then return worker to queue\n            try {\n                await job.result;\n            }\n            catch (error) {\n                // eslint-disable-next-line no-console\n                console.error(`Worker exception: ${error}`);\n            }\n            finally {\n                this.returnWorkerToQueue(workerThread);\n            }\n        }\n    }\n    /**\n     * Returns a worker to the idle queue\n     * Destroys the worker if\n     *  - pool is destroyed\n     *  - if this pool doesn't reuse workers\n     *  - if maxConcurrency has been lowered\n     * @param worker\n     */\n    returnWorkerToQueue(worker) {\n        const shouldDestroyWorker = \n        // Workers on Node.js prevent the process from exiting.\n        // Until we figure out how to close them before exit, we always destroy them\n        !isBrowser ||\n            // If the pool is destroyed, there is no reason to keep the worker around\n            this.isDestroyed ||\n            // If the app has disabled worker reuse, any completed workers should be destroyed\n            !this.reuseWorkers ||\n            // If concurrency has been lowered, this worker might be surplus to requirements\n            this.count > this._getMaxConcurrency();\n        if (shouldDestroyWorker) {\n            worker.destroy();\n            this.count--;\n        }\n        else {\n            this.idleQueue.push(worker);\n        }\n        if (!this.isDestroyed) {\n            this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n        }\n    }\n    /**\n     * Returns idle worker or creates new worker if maxConcurrency has not been reached\n     */\n    _getAvailableWorker() {\n        // If a worker has completed and returned to the queue, it can be used\n        if (this.idleQueue.length > 0) {\n            return this.idleQueue.shift() || null;\n        }\n        // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n        if (this.count < this._getMaxConcurrency()) {\n            this.count++;\n            const name = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;\n            return new WorkerThread({ name, source: this.source, url: this.url });\n        }\n        // No worker available, have to wait\n        return null;\n    }\n    _getMaxConcurrency() {\n        return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport WorkerPool from \"./worker-pool.js\";\nimport WorkerThread from \"./worker-thread.js\";\nconst DEFAULT_PROPS = {\n    maxConcurrency: 3,\n    maxMobileConcurrency: 1,\n    reuseWorkers: true,\n    onDebug: () => { }\n};\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n    props;\n    workerPools = new Map();\n    // singleton\n    static _workerFarm;\n    /** Checks if workers are supported on this platform */\n    static isSupported() {\n        return WorkerThread.isSupported();\n    }\n    /** Get the singleton instance of the global worker farm */\n    static getWorkerFarm(props = {}) {\n        WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n        WorkerFarm._workerFarm.setProps(props);\n        return WorkerFarm._workerFarm;\n    }\n    /** get global instance with WorkerFarm.getWorkerFarm() */\n    constructor(props) {\n        this.props = { ...DEFAULT_PROPS };\n        this.setProps(props);\n        /** @type Map<string, WorkerPool>} */\n        this.workerPools = new Map();\n    }\n    /**\n     * Terminate all workers in the farm\n     * @note Can free up significant memory\n     */\n    destroy() {\n        for (const workerPool of this.workerPools.values()) {\n            workerPool.destroy();\n        }\n        this.workerPools = new Map();\n    }\n    /**\n     * Set props used when initializing worker pools\n     * @param props\n     */\n    setProps(props) {\n        this.props = { ...this.props, ...props };\n        // Update worker pool props\n        for (const workerPool of this.workerPools.values()) {\n            workerPool.setProps(this._getWorkerPoolProps());\n        }\n    }\n    /**\n     * Returns a worker pool for the specified worker\n     * @param options - only used first time for a specific worker name\n     * @param options.name - the name of the worker - used to identify worker pool\n     * @param options.url -\n     * @param options.source -\n     * @example\n     *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n     */\n    getWorkerPool(options) {\n        const { name, source, url } = options;\n        let workerPool = this.workerPools.get(name);\n        if (!workerPool) {\n            workerPool = new WorkerPool({\n                name,\n                source,\n                url\n            });\n            workerPool.setProps(this._getWorkerPoolProps());\n            this.workerPools.set(name, workerPool);\n        }\n        return workerPool;\n    }\n    _getWorkerPoolProps() {\n        return {\n            maxConcurrency: this.props.maxConcurrency,\n            maxMobileConcurrency: this.props.maxMobileConcurrency,\n            reuseWorkers: this.props.reuseWorkers,\n            onDebug: this.props.onDebug\n        };\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from \"../env-utils/assert.js\";\nimport { isBrowser } from \"../env-utils/globals.js\";\nimport { VERSION, NPM_TAG } from \"../env-utils/version.js\";\n/**\n * Gets worker object's name (for debugging in Chrome thread inspector window)\n */\nexport function getWorkerName(worker) {\n    const warning = worker.version !== VERSION ? ` (worker-utils@${VERSION})` : '';\n    return `${worker.name}@${worker.version}${warning}`;\n}\n/**\n * Generate a worker URL based on worker object and options\n * @returns A URL to one of the following:\n * - a published worker on unpkg CDN\n * - a local test worker\n * - a URL provided by the user in options\n */\nexport function getWorkerURL(worker, options = {}) {\n    const workerOptions = options[worker.id] || {};\n    const workerFile = isBrowser ? `${worker.id}-worker.js` : `${worker.id}-worker-node.js`;\n    let url = workerOptions.workerUrl;\n    // HACK: Allow for non-nested workerUrl for the CompressionWorker.\n    // For the compression worker, workerOptions is currently not nested correctly. For most loaders,\n    // you'd have options within an object, i.e. `{mvt: {coordinates: ...}}` but the CompressionWorker\n    // puts options at the top level, not within a `compression` key (its `id`). For this reason, the\n    // above `workerOptions` will always be a string (i.e. `'gzip'`) for the CompressionWorker. To not\n    // break backwards compatibility, we allow the CompressionWorker to have options at the top level.\n    if (!url && worker.id === 'compression') {\n        url = options.workerUrl;\n    }\n    // If URL is test, generate local loaders.gl url\n    // @ts-ignore _workerType\n    if (options._workerType === 'test') {\n        if (isBrowser) {\n            url = `modules/${worker.module}/dist/${workerFile}`;\n        }\n        else {\n            // In the test environment the ts-node loader requires TypeScript code\n            url = `modules/${worker.module}/src/workers/${worker.id}-worker-node.ts`;\n        }\n    }\n    // If url override is not provided, generate a URL to published version on npm CDN unpkg.com\n    if (!url) {\n        // GENERATE\n        let version = worker.version;\n        // On master we need to load npm alpha releases published with the `beta` tag\n        if (version === 'latest') {\n            // throw new Error('latest worker version specified');\n            version = NPM_TAG;\n        }\n        const versionTag = version ? `@${version}` : '';\n        url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;\n    }\n    assert(url);\n    // Allow user to override location\n    return url;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport WorkerFarm from \"../worker-farm/worker-farm.js\";\nimport { getWorkerURL, getWorkerName } from \"./get-worker-url.js\";\nimport { getTransferListForWriter } from \"../worker-utils/get-transfer-list.js\";\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker, options) {\n    if (!WorkerFarm.isSupported()) {\n        return false;\n    }\n    return worker.worker && options?.worker;\n}\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(worker, data, options = {}, context = {}) {\n    const name = getWorkerName(worker);\n    const workerFarm = WorkerFarm.getWorkerFarm(options);\n    const { source } = options;\n    const workerPoolProps = { name, source };\n    if (!source) {\n        workerPoolProps.url = getWorkerURL(worker, options);\n    }\n    const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n    const jobName = options.jobName || worker.name;\n    const job = await workerPool.startJob(jobName, \n    // eslint-disable-next-line\n    onMessage.bind(null, context));\n    // Kick off the processing in the worker\n    const transferableOptions = getTransferListForWriter(options);\n    job.postMessage('process', { input: data, options: transferableOptions });\n    const result = await job.result;\n    return result.result;\n}\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(context, job, type, payload) {\n    switch (type) {\n        case 'done':\n            // Worker is done\n            job.done(payload);\n            break;\n        case 'error':\n            // Worker encountered an error\n            job.error(new Error(payload.error));\n            break;\n        case 'process':\n            // Worker is asking for us (main thread) to process something\n            const { id, input, options } = payload;\n            try {\n                if (!context.process) {\n                    job.postMessage('error', { id, error: 'Worker not set up to process on main thread' });\n                    return;\n                }\n                const result = await context.process(input, options);\n                job.postMessage('done', { id, result });\n            }\n            catch (error) {\n                const message = error instanceof Error ? error.message : 'unknown error';\n                job.postMessage('error', { id, error: message });\n            }\n            break;\n        default:\n            // eslint-disable-next-line\n            console.warn(`process-on-worker: unknown message ${type}`);\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from \"../env-utils/assert.js\";\nimport { VERSION } from \"../env-utils/version.js\";\n/**\n * Check if worker is compatible with this library version\n * @param worker\n * @param libVersion\n * @returns `true` if the two versions are compatible\n */\nexport function validateWorkerVersion(worker, coreVersion = VERSION) {\n    assert(worker, 'no worker provided');\n    const workerVersion = worker.version;\n    if (!coreVersion || !workerVersion) {\n        return false;\n    }\n    // TODO enable when fix the __version__ injection\n    // const coreVersions = parseVersion(coreVersion);\n    // const workerVersions = parseVersion(workerVersion);\n    // assert(\n    //   coreVersion.major === workerVersion.major && coreVersion.minor <= workerVersion.minor,\n    //   `worker: ${worker.name} is not compatible. ${coreVersion.major}.${\n    //     coreVersion.minor\n    //   }+ is required.`\n    // );\n    return true;\n}\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction parseVersion(version) {\n    const parts = version.split('.').map(Number);\n    return { major: parts[0], minor: parts[1] };\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* global importScripts */\nimport { isBrowser, isWorker } from \"../env-utils/globals.js\";\nimport { assert } from \"../env-utils/assert.js\";\nimport { VERSION } from \"../env-utils/version.js\";\nconst loadLibraryPromises = {}; // promises\n/**\n * Dynamically loads a library (\"module\")\n *\n * - wasm library: Array buffer is returned\n * - js library: Parse JS is returned\n *\n * Method depends on environment\n * - browser - script element is created and installed on document\n * - worker - eval is called on global context\n * - node - file is required\n *\n * @param libraryUrl\n * @param moduleName\n * @param options\n */\nexport async function loadLibrary(libraryUrl, moduleName = null, options = {}, libraryName = null) {\n    if (moduleName) {\n        libraryUrl = getLibraryUrl(libraryUrl, moduleName, options, libraryName);\n    }\n    // Ensure libraries are only loaded once\n    loadLibraryPromises[libraryUrl] =\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n    return await loadLibraryPromises[libraryUrl];\n}\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library, moduleName, options = {}, libraryName = null) {\n    // Check if already a URL\n    if (!options.useLocalLibraries && library.startsWith('http')) {\n        return library;\n    }\n    libraryName = libraryName || library;\n    // Allow application to import and supply libraries through `options.modules`\n    // TODO - See js-module-utils in loader-utils\n    const modules = options.modules || {};\n    if (modules[libraryName]) {\n        return modules[libraryName];\n    }\n    // Load from local files, not from CDN scripts in Node.js\n    // TODO - needs to locate the modules directory when installed!\n    if (!isBrowser) {\n        return `modules/${moduleName}/dist/libs/${libraryName}`;\n    }\n    // In browser, load from external scripts\n    if (options.CDN) {\n        assert(options.CDN.startsWith('http'));\n        return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${libraryName}`;\n    }\n    // TODO - loading inside workers requires paths relative to worker script location...\n    if (isWorker) {\n        return `../src/libs/${libraryName}`;\n    }\n    return `modules/${moduleName}/src/libs/${libraryName}`;\n}\nasync function loadLibraryFromFile(libraryUrl) {\n    if (libraryUrl.endsWith('wasm')) {\n        return await loadAsArrayBuffer(libraryUrl);\n    }\n    if (!isBrowser) {\n        // TODO - Node doesn't yet support dynamic import from https URLs\n        // try {\n        //   return await import(libraryUrl);\n        // } catch (error) {\n        //   console.error(error);\n        // }\n        try {\n            const { requireFromFile } = globalThis.loaders || {};\n            return await requireFromFile?.(libraryUrl);\n        }\n        catch (error) {\n            console.error(error); // eslint-disable-line no-console\n            return null;\n        }\n    }\n    if (isWorker) {\n        return importScripts(libraryUrl);\n    }\n    // TODO - fix - should be more secure than string parsing since observes CORS\n    // if (isBrowser) {\n    //   return await loadScriptFromFile(libraryUrl);\n    // }\n    const scriptSource = await loadAsText(libraryUrl);\n    return loadLibraryFromString(scriptSource, libraryUrl);\n}\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource, id) {\n    if (!isBrowser) {\n        const { requireFromString } = globalThis.loaders || {};\n        return requireFromString?.(scriptSource, id);\n    }\n    if (isWorker) {\n        // Use lvalue trick to make eval run in global scope\n        eval.call(globalThis, scriptSource); // eslint-disable-line no-eval\n        // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n        // http://perfectionkills.com/global-eval-what-are-the-options/\n        return null;\n    }\n    const script = document.createElement('script');\n    script.id = id;\n    // most browsers like a separate text node but some throw an error. The second method covers those.\n    try {\n        script.appendChild(document.createTextNode(scriptSource));\n    }\n    catch (e) {\n        script.text = scriptSource;\n    }\n    document.body.appendChild(script);\n    return null;\n}\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\nasync function loadAsArrayBuffer(url) {\n    const { readFileAsArrayBuffer } = globalThis.loaders || {};\n    if (isBrowser || !readFileAsArrayBuffer || url.startsWith('http')) {\n        const response = await fetch(url);\n        return await response.arrayBuffer();\n    }\n    return await readFileAsArrayBuffer(url);\n}\n/**\n * Load a file from local file system\n * @param filename\n * @returns\n */\nasync function loadAsText(url) {\n    const { readFileAsText } = globalThis.loaders || {};\n    if (isBrowser || !readFileAsText || url.startsWith('http')) {\n        const response = await fetch(url);\n        return await response.text();\n    }\n    return await readFileAsText(url);\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/* eslint-disable no-console */\n// Avoid using named imports for Node builtins to help with \"empty\" resolution\n// for bundlers targeting browser environments. Access imports & types\n// through the `ChildProcess` object (e.g. `ChildProcess.spawn`, `ChildProcess.ChildProcess`).\nimport * as ChildProcess from 'child_process';\nimport { getAvailablePort } from \"./process-utils.js\";\nconst DEFAULT_PROPS = {\n    command: '',\n    arguments: [],\n    port: 5000,\n    autoPort: true,\n    wait: 2000,\n    onSuccess: (processProxy) => {\n        console.log(`Started ${processProxy.props.command}`);\n    }\n};\n/**\n * Manager for a Node.js child process\n * Prepares arguments, starts, stops and tracks output\n */\nexport default class ChildProcessProxy {\n    id;\n    props = { ...DEFAULT_PROPS };\n    childProcess = null;\n    port = 0;\n    successTimer; // NodeJS.Timeout;\n    // constructor(props?: {id?: string});\n    constructor({ id = 'browser-driver' } = {}) {\n        this.id = id;\n    }\n    /** Starts a child process with the provided props */\n    async start(props) {\n        props = { ...DEFAULT_PROPS, ...props };\n        this.props = props;\n        const args = [...props.arguments];\n        // If portArg is set, we can look up an available port\n        this.port = Number(props.port);\n        if (props.portArg) {\n            if (props.autoPort) {\n                this.port = await getAvailablePort(props.port);\n            }\n            args.push(props.portArg, String(this.port));\n        }\n        return await new Promise((resolve, reject) => {\n            try {\n                this._setTimeout(() => {\n                    if (props.onSuccess) {\n                        props.onSuccess(this);\n                    }\n                    resolve({});\n                });\n                console.log(`Spawning ${props.command} ${props.arguments.join(' ')}`);\n                const childProcess = ChildProcess.spawn(props.command, args, props.spawn);\n                this.childProcess = childProcess;\n                childProcess.stdout.on('data', (data) => {\n                    console.log(data.toString());\n                });\n                childProcess.stderr.on('data', (data) => {\n                    console.log(`Child process wrote to stderr: \"${data}\".`);\n                    if (!props.ignoreStderr) {\n                        this._clearTimeout();\n                        reject(new Error(data));\n                    }\n                });\n                childProcess.on('error', (error) => {\n                    console.log(`Child process errored with ${error}`);\n                    this._clearTimeout();\n                    reject(error);\n                });\n                childProcess.on('close', (code) => {\n                    console.log(`Child process exited with ${code}`);\n                    this.childProcess = null;\n                    this._clearTimeout();\n                    resolve({});\n                });\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    }\n    /** Stops a running child process */\n    async stop() {\n        if (this.childProcess) {\n            this.childProcess.kill();\n            this.childProcess = null;\n        }\n    }\n    /** Exits this process */\n    async exit(statusCode = 0) {\n        try {\n            await this.stop();\n            // eslint-disable-next-line no-process-exit\n            process.exit(statusCode);\n        }\n        catch (error) {\n            console.error(error.message || error);\n            // eslint-disable-next-line no-process-exit\n            process.exit(1);\n        }\n    }\n    _setTimeout(callback) {\n        if (Number(this.props.wait) > 0) {\n            this.successTimer = setTimeout(callback, this.props.wait);\n        }\n    }\n    _clearTimeout() {\n        if (this.successTimer) {\n            clearTimeout(this.successTimer);\n        }\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport ChildProcess from 'child_process';\n// Get an available port\n// Works on Unix systems\nexport function getAvailablePort(defaultPort = 3000) {\n    return new Promise((resolve) => {\n        // Get a list of all ports in use\n        ChildProcess.exec('lsof -i -P -n | grep LISTEN', (error, stdout) => {\n            if (error) {\n                // likely no permission, e.g. CI\n                resolve(defaultPort);\n                return;\n            }\n            const portsInUse = [];\n            const regex = /:(\\d+) \\(LISTEN\\)/;\n            stdout.split('\\n').forEach((line) => {\n                const match = regex.exec(line);\n                if (match) {\n                    portsInUse.push(Number(match[1]));\n                }\n            });\n            let port = defaultPort;\n            while (portsInUse.includes(port)) {\n                port++;\n            }\n            resolve(port);\n        });\n    });\n}\n", "import { isBrowser, WorkerFarm, getWorkerURL } from '@loaders.gl/worker-utils';\n/**\n * Determines if a loader can parse with worker\n * @param loader\n * @param options\n */\nexport function canParseWithWorker(loader, options) {\n    if (!WorkerFarm.isSupported()) {\n        return false;\n    }\n    // Node workers are still experimental\n    if (!isBrowser && !options?._nodeWorkers) {\n        return false;\n    }\n    return loader.worker && options?.worker;\n}\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createLoaderWorker in @loaders.gl/loader-utils.\n */\nexport async function parseWithWorker(loader, data, options, context, parseOnMainThread) {\n    const name = loader.id; // TODO\n    const url = getWorkerURL(loader, options);\n    const workerFarm = WorkerFarm.getWorkerFarm(options);\n    const workerPool = workerFarm.getWorkerPool({ name, url });\n    // options.log object contains functions which cannot be transferred\n    // context.fetch & context.parse functions cannot be transferred\n    // TODO - decide how to handle logging on workers\n    options = JSON.parse(JSON.stringify(options));\n    context = JSON.parse(JSON.stringify(context || {}));\n    const job = await workerPool.startJob('process-on-worker', \n    // @ts-expect-error\n    onMessage.bind(null, parseOnMainThread) // eslint-disable-line @typescript-eslint/no-misused-promises\n    );\n    job.postMessage('process', {\n        // @ts-ignore\n        input: data,\n        options,\n        context\n    });\n    const result = await job.result;\n    // TODO - what is going on here?\n    return await result.result;\n}\n/**\n * Handle worker's responses to the main thread\n * @param job\n * @param type\n * @param payload\n */\nasync function onMessage(parseOnMainThread, job, type, payload) {\n    switch (type) {\n        case 'done':\n            job.done(payload);\n            break;\n        case 'error':\n            job.error(new Error(payload.error));\n            break;\n        case 'process':\n            // Worker is asking for main thread to parseO\n            const { id, input, options } = payload;\n            try {\n                const result = await parseOnMainThread(input, options);\n                job.postMessage('done', { id, result });\n            }\n            catch (error) {\n                const message = error instanceof Error ? error.message : 'unknown error';\n                job.postMessage('error', { id, error: message });\n            }\n            break;\n        default:\n            // eslint-disable-next-line\n            console.warn(`parse-with-worker unknown message ${type}`);\n    }\n}\n", "import { WorkerFarm } from '@loaders.gl/worker-utils';\nimport { isBrowser } from \"../env-utils/globals.js\";\n/**\n * Determines if a loader can parse with worker\n * @param loader\n * @param options\n */\nexport function canEncodeWithWorker(writer, options) {\n    if (!WorkerFarm.isSupported()) {\n        return false;\n    }\n    // Node workers are still experimental\n    if (!isBrowser && !options?._nodeWorkers) {\n        return false;\n    }\n    return writer.worker && options?.worker;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Get the first characters from a binary file (interpret the first bytes as an ASCII string)\n * @param data\n * @param length\n * @returns\n */\nexport function getFirstCharacters(data, length = 5) {\n    if (typeof data === 'string') {\n        return data.slice(0, length);\n    }\n    else if (ArrayBuffer.isView(data)) {\n        // Typed Arrays can have offsets into underlying buffer\n        return getMagicString(data.buffer, data.byteOffset, length);\n    }\n    else if (data instanceof ArrayBuffer) {\n        const byteOffset = 0;\n        return getMagicString(data, byteOffset, length);\n    }\n    return '';\n}\n/**\n * Gets a magic string from a \"file\"\n * Typically used to check or detect file format\n * @param arrayBuffer\n * @param byteOffset\n * @param length\n * @returns\n */\nexport function getMagicString(arrayBuffer, byteOffset, length) {\n    if (arrayBuffer.byteLength <= byteOffset + length) {\n        return '';\n    }\n    const dataView = new DataView(arrayBuffer);\n    let magic = '';\n    for (let i = 0; i < length; i++) {\n        magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n    }\n    return magic;\n}\n", "import { getFirstCharacters } from \"../binary-utils/get-first-characters.js\";\n/**\n * Minimal JSON parser that throws more meaningful error messages\n */\nexport function parseJSON(string) {\n    try {\n        return JSON.parse(string);\n    }\n    catch (_) {\n        throw new Error(`Failed to parse JSON from data starting with \"${getFirstCharacters(string)}\"`);\n    }\n}\n", "/**\n * compare two binary arrays for equality\n * @param a\n * @param b\n * @param byteLength\n */\nexport function compareArrayBuffers(arrayBuffer1, arrayBuffer2, byteLength) {\n    byteLength = byteLength || arrayBuffer1.byteLength;\n    if (arrayBuffer1.byteLength < byteLength || arrayBuffer2.byteLength < byteLength) {\n        return false;\n    }\n    const array1 = new Uint8Array(arrayBuffer1);\n    const array2 = new Uint8Array(arrayBuffer2);\n    for (let i = 0; i < array1.length; ++i) {\n        if (array1[i] !== array2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Concatenate a sequence of ArrayBuffers from arguments\n * @return A concatenated ArrayBuffer\n */\nexport function concatenateArrayBuffers(...sources) {\n    return concatenateArrayBuffersFromArray(sources);\n}\n/**\n * Concatenate a sequence of ArrayBuffers from array\n * @return A concatenated ArrayBuffer\n */\nexport function concatenateArrayBuffersFromArray(sources) {\n    // Make sure all inputs are wrapped in typed arrays\n    const sourceArrays = sources.map((source2) => source2 instanceof ArrayBuffer ? new Uint8Array(source2) : source2);\n    // Get length of all inputs\n    const byteLength = sourceArrays.reduce((length, typedArray) => length + typedArray.byteLength, 0);\n    // Allocate array with space for all inputs\n    const result = new Uint8Array(byteLength);\n    // Copy the subarrays\n    let offset = 0;\n    for (const sourceArray of sourceArrays) {\n        result.set(sourceArray, offset);\n        offset += sourceArray.byteLength;\n    }\n    // We work with ArrayBuffers, discard the typed array wrapper\n    return result.buffer;\n}\n/**\n * Concatenate arbitrary count of typed arrays\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\n * @param - list of arrays. All arrays should be the same type\n * @return A concatenated TypedArray\n */\nexport function concatenateTypedArrays(...typedArrays) {\n    // @ts-ignore\n    const arrays = typedArrays;\n    // @ts-ignore\n    const TypedArrayConstructor = (arrays && arrays.length > 1 && arrays[0].constructor) || null;\n    if (!TypedArrayConstructor) {\n        throw new Error('\"concatenateTypedArrays\" - incorrect quantity of arguments or arguments have incompatible data types');\n    }\n    const sumLength = arrays.reduce((acc, value) => acc + value.length, 0);\n    // @ts-ignore typescript does not like dynamic constructors\n    const result = new TypedArrayConstructor(sumLength);\n    let offset = 0;\n    for (const array of arrays) {\n        result.set(array, offset);\n        offset += array.length;\n    }\n    return result;\n}\n/**\n * Copy a view of an ArrayBuffer into new ArrayBuffer with byteOffset = 0\n * @param arrayBuffer\n * @param byteOffset\n * @param byteLength\n */\nexport function sliceArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n    const subArray = byteLength !== undefined\n        ? new Uint8Array(arrayBuffer).subarray(byteOffset, byteOffset + byteLength)\n        : new Uint8Array(arrayBuffer).subarray(byteOffset);\n    const arrayCopy = new Uint8Array(subArray);\n    return arrayCopy.buffer;\n}\n", "import { assert } from \"../env-utils/assert.js\";\n/**\n * Calculate new size of an arrayBuffer to be aligned to an n-byte boundary\n * This function increases `byteLength` by the minimum delta,\n * allowing the total length to be divided by `padding`\n * @param byteLength\n * @param padding\n */\nexport function padToNBytes(byteLength, padding) {\n    assert(byteLength >= 0); // `Incorrect 'byteLength' value: ${byteLength}`\n    assert(padding > 0); // `Incorrect 'padding' value: ${padding}`\n    return (byteLength + (padding - 1)) & ~(padding - 1);\n}\n/**\n * Creates a new Uint8Array based on two different ArrayBuffers\n * @param targetBuffer The first buffer.\n * @param sourceBuffer The second buffer.\n * @return The new ArrayBuffer created out of the two.\n */\nexport function copyArrayBuffer(targetBuffer, sourceBuffer, byteOffset, byteLength = sourceBuffer.byteLength) {\n    const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n    const sourceArray = new Uint8Array(sourceBuffer);\n    targetArray.set(sourceArray);\n    return targetBuffer;\n}\n/**\n * Copy from source to target at the targetOffset\n *\n * @param source - The data to copy\n * @param target - The destination to copy data into\n * @param targetOffset - The start offset into target to place the copied data\n * @returns the new offset taking into account proper padding\n */\nexport function copyToArray(source, target, targetOffset) {\n    let sourceArray;\n    if (source instanceof ArrayBuffer) {\n        sourceArray = new Uint8Array(source);\n    }\n    else {\n        // Pack buffer onto the big target array\n        //\n        // 'source.data.buffer' could be a view onto a larger buffer.\n        // We MUST use this constructor to ensure the byteOffset and byteLength is\n        // set to correct values from 'source.data' and not the underlying\n        // buffer for target.set() to work properly.\n        const srcByteOffset = source.byteOffset;\n        const srcByteLength = source.byteLength;\n        // In gltf parser it is set as \"arrayBuffer\" instead of \"buffer\"\n        // https://github.com/visgl/loaders.gl/blob/1e3a82a0a65d7b6a67b1e60633453e5edda2960a/modules/gltf/src/lib/parse-gltf.js#L85\n        sourceArray = new Uint8Array(source.buffer || source.arrayBuffer, srcByteOffset, srcByteLength);\n    }\n    // Pack buffer onto the big target array\n    target.set(sourceArray, targetOffset);\n    return targetOffset + padToNBytes(sourceArray.byteLength, 4);\n}\n", "// TextDecoder iterators\n// TextDecoder will keep any partial undecoded bytes between calls to `decode`\nexport async function* makeTextDecoderIterator(arrayBufferIterator, options = {}) {\n    const textDecoder = new TextDecoder(undefined, options);\n    for await (const arrayBuffer of arrayBufferIterator) {\n        yield typeof arrayBuffer === 'string'\n            ? arrayBuffer\n            : textDecoder.decode(arrayBuffer, { stream: true });\n    }\n}\n// TextEncoder iterator\n// TODO - this is not useful unless min chunk size is given\n// TextEncoder will keep any partial undecoded bytes between calls to `encode`\n// If iterator does not yield strings, assume arrayBuffer and return unencoded\nexport async function* makeTextEncoderIterator(textIterator) {\n    const textEncoder = new TextEncoder();\n    for await (const text of textIterator) {\n        yield typeof text === 'string' ? textEncoder.encode(text) : text;\n    }\n}\n/**\n * @param textIterator async iterable yielding strings\n * @returns an async iterable over lines\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\nexport async function* makeLineIterator(textIterator) {\n    let previous = '';\n    for await (const textChunk of textIterator) {\n        previous += textChunk;\n        let eolIndex;\n        while ((eolIndex = previous.indexOf('\\n')) >= 0) {\n            // line includes the EOL\n            const line = previous.slice(0, eolIndex + 1);\n            previous = previous.slice(eolIndex + 1);\n            yield line;\n        }\n    }\n    if (previous.length > 0) {\n        yield previous;\n    }\n}\n/**\n * @param lineIterator async iterable yielding lines\n * @returns async iterable yielding numbered lines\n *\n * See http://2ality.com/2018/04/async-iter-nodejs.html\n */\nexport async function* makeNumberedLineIterator(lineIterator) {\n    let counter = 1;\n    for await (const line of lineIterator) {\n        yield { counter, line };\n        counter++;\n    }\n}\n", "import { concatenateArrayBuffers } from \"../binary-utils/array-buffer-utils.js\";\n// GENERAL UTILITIES\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n    // eslint-disable-next-line\n    while (true) {\n        const { done, value } = await iterator.next();\n        if (done) {\n            iterator.return();\n            return;\n        }\n        const cancel = visitor(value);\n        if (cancel) {\n            return;\n        }\n    }\n}\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\nexport async function concatenateArrayBuffersAsync(asyncIterator) {\n    const arrayBuffers = [];\n    for await (const chunk of asyncIterator) {\n        arrayBuffers.push(chunk);\n    }\n    return concatenateArrayBuffers(...arrayBuffers);\n}\nexport async function concatenateStringsAsync(asyncIterator) {\n    const strings = [];\n    for await (const chunk of asyncIterator) {\n        strings.push(chunk);\n    }\n    return strings.join('');\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default function getHiResTimestamp(): number {\n  let timestamp;\n  // Get best timer available.\n  if (typeof window !== 'undefined' && window.performance) {\n    timestamp = window.performance.now();\n  } else if (typeof process !== 'undefined' && process.hrtime) {\n    const timeParts = process.hrtime();\n    timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;\n  } else {\n    timestamp = Date.now();\n  }\n\n  return timestamp;\n}\n", "import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  readonly name: string;\n  readonly type: string | undefined;\n  sampleSize: number = 1;\n  time: number = 0;\n  count: number = 0;\n  samples: number = 0;\n  lastTiming: number = 0;\n  lastSampleTime: number = 0;\n  lastSampleCount: number = 0;\n\n  _count: number = 0;\n  _time: number = 0;\n  _samples: number = 0;\n  _startTime: number = 0;\n  _timerPending: boolean = false;\n\n  constructor(name: string, type?: string) {\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n\n  reset(): this {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  setSampleSize(samples: number): this {\n    this.sampleSize = samples;\n    return this;\n  }\n\n  /** Call to increment count (+1) */\n  incrementCount(): this {\n    this.addCount(1);\n\n    return this;\n  }\n\n  /** Call to decrement count (-1) */\n  decrementCount(): this {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  /** Increase count */\n  addCount(value: number): this {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Decrease count */\n  subtractCount(value: number): this {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Add an arbitrary timing and bump the count */\n  addTime(time: number): this {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Start a timer */\n  timeStart(): this {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd(): this {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount(): number {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime(): number {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  /** Calculate counts per second for the previous window */\n  getSampleHz(): number {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount(): number {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  /** Calculate average time / count */\n  getAverageTime(): number {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  /** Calculate counts per second */\n  getHz(): number {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  _checkSampling(): void {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n", "// probe.gl, MIT license\n\nimport Stat from './stat';\n\ntype TableEntry = {\n  time: number;\n  count: number;\n  average: number;\n  hz: number;\n};\n\n/** A \"bag\" of `Stat` objects, can be visualized using `StatsWidget` */\nexport default class Stats {\n  readonly id: string;\n  readonly stats: Record<string, Stat> = {};\n\n  constructor(options: {id: string; stats?: Stats | Stat[] | {name: string; type?: string}[]}) {\n    this.id = options.id;\n    this.stats = {};\n\n    this._initializeStats(options.stats);\n\n    Object.seal(this);\n  }\n\n  /** Acquire a stat. Create if it doesn't exist. */\n  get(name: string, type: string = 'count'): Stat {\n    return this._getOrCreate({name, type});\n  }\n\n  get size(): number {\n    return Object.keys(this.stats).length;\n  }\n\n  /** Reset all stats */\n  reset(): this {\n    for (const stat of Object.values(this.stats)) {\n      stat.reset();\n    }\n\n    return this;\n  }\n\n  forEach(fn: (stat: Stat) => void): void {\n    for (const stat of Object.values(this.stats)) {\n      fn(stat);\n    }\n  }\n\n  getTable(): Record<string, TableEntry> {\n    const table: Record<string, TableEntry> = {};\n    this.forEach(stat => {\n      table[stat.name] = {\n        time: stat.time || 0,\n        count: stat.count || 0,\n        average: stat.getAverageTime() || 0,\n        hz: stat.getHz() || 0\n      };\n    });\n\n    return table;\n  }\n\n  _initializeStats(stats: Stats | Stat[] | {name: string; type?: string}[] = []): void {\n    stats.forEach(stat => this._getOrCreate(stat));\n  }\n\n  _getOrCreate(stat: Stat | {name: string, type?: string}): Stat {\n    const {name, type} = stat;\n    let result = this.stats[name];\n    if (!result) {\n      if (stat instanceof Stat) {\n        result = stat;\n      } else {\n        result = new Stat(name, type);\n      }\n      this.stats[name] = result;\n    }\n    return result;\n  }\n}\n", "import { Stats } from '@probe.gl/stats';\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\nconst DEFAULT_PROPS = {\n    id: 'request-scheduler',\n    /** Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing. */\n    throttleRequests: true,\n    /** The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit. */\n    maxRequests: 6,\n    /**\n     * Specifies a debounce time, in milliseconds. All requests are queued, until no new requests have\n     * been added to the queue for this amount of time.\n     */\n    debounceTime: 0\n};\n/**\n * Used to issue a request, without having them \"deeply queued\" by the browser.\n * @todo - Track requests globally, across multiple servers\n */\nexport default class RequestScheduler {\n    props;\n    stats;\n    activeRequestCount = 0;\n    /** Tracks the number of active requests and prioritizes/cancels queued requests. */\n    requestQueue = [];\n    requestMap = new Map();\n    updateTimer = null;\n    constructor(props = {}) {\n        this.props = { ...DEFAULT_PROPS, ...props };\n        // Returns the statistics used by the request scheduler.\n        this.stats = new Stats({ id: this.props.id });\n        this.stats.get(STAT_QUEUED_REQUESTS);\n        this.stats.get(STAT_ACTIVE_REQUESTS);\n        this.stats.get(STAT_CANCELLED_REQUESTS);\n        this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n        this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n    }\n    /**\n     * Called by an application that wants to issue a request, without having it deeply queued by the browser\n     *\n     * When the returned promise resolved, it is OK for the application to issue a request.\n     * The promise resolves to an object that contains a `done` method.\n     * When the application's request has completed (or failed), the application must call the `done` function\n     *\n     * @param handle\n     * @param getPriority will be called when request \"slots\" open up,\n     *    allowing the caller to update priority or cancel the request\n     *    Highest priority executes first, priority < 0 cancels the request\n     * @returns a promise\n     *   - resolves to a object (with a `done` field) when the request can be issued without queueing,\n     *   - resolves to `null` if the request has been cancelled (by the callback return < 0).\n     *     In this case the application should not issue the request\n     */\n    scheduleRequest(handle, getPriority = () => 0) {\n        // Allows throttling to be disabled\n        if (!this.props.throttleRequests) {\n            return Promise.resolve({ done: () => { } });\n        }\n        // dedupe\n        if (this.requestMap.has(handle)) {\n            return this.requestMap.get(handle);\n        }\n        const request = { handle, priority: 0, getPriority };\n        const promise = new Promise((resolve) => {\n            // @ts-ignore\n            request.resolve = resolve;\n            return request;\n        });\n        this.requestQueue.push(request);\n        this.requestMap.set(handle, promise);\n        this._issueNewRequests();\n        return promise;\n    }\n    // PRIVATE\n    _issueRequest(request) {\n        const { handle, resolve } = request;\n        let isDone = false;\n        const done = () => {\n            // can only be called once\n            if (!isDone) {\n                isDone = true;\n                // Stop tracking a request - it has completed, failed, cancelled etc\n                this.requestMap.delete(handle);\n                this.activeRequestCount--;\n                // A slot just freed up, see if any queued requests are waiting\n                this._issueNewRequests();\n            }\n        };\n        // Track this request\n        this.activeRequestCount++;\n        return resolve ? resolve({ done }) : Promise.resolve({ done });\n    }\n    /** We check requests asynchronously, to prevent multiple updates */\n    _issueNewRequests() {\n        if (this.updateTimer !== null) {\n            clearTimeout(this.updateTimer);\n        }\n        this.updateTimer = setTimeout(() => this._issueNewRequestsAsync(), this.props.debounceTime);\n    }\n    /** Refresh all requests  */\n    _issueNewRequestsAsync() {\n        if (this.updateTimer !== null) {\n            clearTimeout(this.updateTimer);\n        }\n        this.updateTimer = null;\n        const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n        if (freeSlots === 0) {\n            return;\n        }\n        this._updateAllRequests();\n        // Resolve pending promises for the top-priority requests\n        for (let i = 0; i < freeSlots; ++i) {\n            const request = this.requestQueue.shift();\n            if (request) {\n                this._issueRequest(request); // eslint-disable-line @typescript-eslint/no-floating-promises\n            }\n        }\n        // Uncomment to debug\n        // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n    }\n    /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */\n    _updateAllRequests() {\n        const requestQueue = this.requestQueue;\n        for (let i = 0; i < requestQueue.length; ++i) {\n            const request = requestQueue[i];\n            if (!this._updateRequest(request)) {\n                // Remove the element and make sure to adjust the counter to account for shortened array\n                requestQueue.splice(i, 1);\n                this.requestMap.delete(request.handle);\n                i--;\n            }\n        }\n        // Sort the remaining requests based on priority\n        requestQueue.sort((a, b) => a.priority - b.priority);\n    }\n    /** Update a single request by calling the callback */\n    _updateRequest(request) {\n        request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n        // by returning a negative priority, the callback cancels the request\n        if (request.priority < 0) {\n            request.resolve(null);\n            return false;\n        }\n        return true;\n    }\n}\n", "// Simple file alias mechanisms for tests.\nlet pathPrefix = '';\nconst fileAliases = {};\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n    pathPrefix = prefix;\n}\n/*\n * Get the relative path prefix\n */\nexport function getPathPrefix() {\n    return pathPrefix;\n}\n/**\n *\n * @param aliases\n *\n * Note: addAliases are an experimental export, they are only for testing of loaders.gl loaders\n * not intended as a generic aliasing mechanism\n */\nexport function addAliases(aliases) {\n    Object.assign(fileAliases, aliases);\n}\n/**\n * Resolves aliases and adds path-prefix to paths\n */\nexport function resolvePath(filename) {\n    for (const alias in fileAliases) {\n        if (filename.startsWith(alias)) {\n            const replacement = fileAliases[alias];\n            filename = filename.replace(alias, replacement);\n        }\n    }\n    if (!filename.startsWith('http://') && !filename.startsWith('https://')) {\n        filename = `${pathPrefix}${filename}`;\n    }\n    return filename;\n}\n", "// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\n/**\n * A JSON Micro loader (minimal bundle size)\n * Alternative to `@loaders.gl/json`\n */\nexport const JSONLoader = {\n    dataType: null,\n    batchType: null,\n    name: 'JSON',\n    id: 'json',\n    module: 'json',\n    version: VERSION,\n    extensions: ['json', 'geojson'],\n    mimeTypes: ['application/json'],\n    category: 'json',\n    text: true,\n    parseTextSync,\n    parse: async (arrayBuffer) => parseTextSync(new TextDecoder().decode(arrayBuffer)),\n    options: {}\n};\n// TODO - Better error handling!\nfunction parseTextSync(text) {\n    return JSON.parse(text);\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Isolates Buffer references to ensure they are only bundled under Node.js (avoids big webpack polyfill)\n// this file is selected by the package.json \"browser\" field).\n/**\n * Convert Buffer to ArrayBuffer\n * Converts Node.js `Buffer` to `ArrayBuffer` (without triggering bundler to include Buffer polyfill on browser)\n * @todo better data type\n */\nexport function toArrayBuffer(buffer) {\n    return buffer;\n}\n/**\n * Convert (copy) ArrayBuffer to Buffer\n */\nexport function toBuffer(binaryData) {\n    throw new Error('Buffer not supported in browser');\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport * as node from \"../node/buffer.js\";\n/**\n * Check for Node.js `Buffer` (without triggering bundler to include Buffer polyfill on browser)\n */\nexport function isBuffer(value) {\n    return value && typeof value === 'object' && value.isBuffer;\n}\n/**\n * Converts to Node.js `Buffer` (without triggering bundler to include Buffer polyfill on browser)\n * @todo better data type\n */\nexport function toBuffer(data) {\n    return node.toBuffer ? node.toBuffer(data) : data;\n}\n/**\n * Convert an object to an array buffer\n */\nexport function toArrayBuffer(data) {\n    // Note: Should be called first, Buffers can trigger other detections below\n    if (isBuffer(data)) {\n        return node.toArrayBuffer(data);\n    }\n    if (data instanceof ArrayBuffer) {\n        return data;\n    }\n    // Careful - Node Buffers look like Uint8Arrays (keep after isBuffer)\n    if (ArrayBuffer.isView(data)) {\n        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n    }\n    if (typeof data === 'string') {\n        const text = data;\n        const uint8Array = new TextEncoder().encode(text);\n        return uint8Array.buffer;\n    }\n    // HACK to support Blob polyfill\n    if (data && typeof data === 'object' && data._toArrayBuffer) {\n        return data._toArrayBuffer();\n    }\n    throw new Error('toArrayBuffer');\n}\n", "// Beginning of a minimal implementation of the Node.js path API, that doesn't pull in big polyfills.\nimport { getCWD } from \"./get-cwd.js\";\n/**\n * Replacement for Node.js path.filename\n * @param url\n */\nexport function filename(url) {\n    const slashIndex = url ? url.lastIndexOf('/') : -1;\n    return slashIndex >= 0 ? url.substr(slashIndex + 1) : '';\n}\n/**\n * Replacement for Node.js path.dirname\n * @param url\n */\nexport function dirname(url) {\n    const slashIndex = url ? url.lastIndexOf('/') : -1;\n    return slashIndex >= 0 ? url.substr(0, slashIndex) : '';\n}\n/**\n * Replacement for Node.js path.join\n * @param parts\n */\nexport function join(...parts) {\n    const separator = '/';\n    parts = parts.map((part, index) => {\n        if (index) {\n            part = part.replace(new RegExp(`^${separator}`), '');\n        }\n        if (index !== parts.length - 1) {\n            part = part.replace(new RegExp(`${separator}$`), '');\n        }\n        return part;\n    });\n    return parts.join(separator);\n}\n/* eslint-disable no-continue */\n/**\n * https://nodejs.org/api/path.html#path_path_resolve_paths\n * @param paths A sequence of paths or path segments.\n * @return resolved path\n * Forked from BTOdell/path-resolve under MIT license\n * @see https://github.com/BTOdell/path-resolve/blob/master/LICENSE\n */\nexport function resolve(...components) {\n    const paths = [];\n    for (let _i = 0; _i < components.length; _i++) {\n        paths[_i] = components[_i];\n    }\n    let resolvedPath = '';\n    let resolvedAbsolute = false;\n    let cwd;\n    for (let i = paths.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n        let path;\n        if (i >= 0) {\n            path = paths[i];\n        }\n        else {\n            if (cwd === undefined) {\n                cwd = getCWD();\n            }\n            path = cwd;\n        }\n        // Skip empty entries\n        if (path.length === 0) {\n            continue;\n        }\n        resolvedPath = `${path}/${resolvedPath}`;\n        resolvedAbsolute = path.charCodeAt(0) === SLASH;\n    }\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path (removes leading slash)\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n    if (resolvedAbsolute) {\n        return `/${resolvedPath}`;\n    }\n    else if (resolvedPath.length > 0) {\n        return resolvedPath;\n    }\n    return '.';\n}\nconst SLASH = 47;\nconst DOT = 46;\n/**\n * Resolves . and .. elements in a path with directory names\n * Forked from BTOdell/path-resolve under MIT license\n * @see https://github.com/BTOdell/path-resolve/blob/master/LICENSE\n */\n/* eslint-disable max-depth */\n// eslint-disable-next-line complexity, max-statements\nfunction normalizeStringPosix(path, allowAboveRoot) {\n    let res = '';\n    let lastSlash = -1;\n    let dots = 0;\n    let code;\n    let isAboveRoot = false;\n    for (let i = 0; i <= path.length; ++i) {\n        if (i < path.length) {\n            code = path.charCodeAt(i);\n        }\n        else if (code === SLASH) {\n            break;\n        }\n        else {\n            code = SLASH;\n        }\n        if (code === SLASH) {\n            if (lastSlash === i - 1 || dots === 1) {\n                // NOOP\n            }\n            else if (lastSlash !== i - 1 && dots === 2) {\n                if (res.length < 2 ||\n                    !isAboveRoot ||\n                    res.charCodeAt(res.length - 1) !== DOT ||\n                    res.charCodeAt(res.length - 2) !== DOT) {\n                    if (res.length > 2) {\n                        const start = res.length - 1;\n                        let j = start;\n                        for (; j >= 0; --j) {\n                            if (res.charCodeAt(j) === SLASH) {\n                                break;\n                            }\n                        }\n                        if (j !== start) {\n                            res = j === -1 ? '' : res.slice(0, j);\n                            lastSlash = i;\n                            dots = 0;\n                            isAboveRoot = false;\n                            continue;\n                        }\n                    }\n                    else if (res.length === 2 || res.length === 1) {\n                        res = '';\n                        lastSlash = i;\n                        dots = 0;\n                        isAboveRoot = false;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    if (res.length > 0) {\n                        res += '/..';\n                    }\n                    else {\n                        res = '..';\n                    }\n                    isAboveRoot = true;\n                }\n            }\n            else {\n                const slice = path.slice(lastSlash + 1, i);\n                if (res.length > 0) {\n                    res += `/${slice}`;\n                }\n                else {\n                    res = slice;\n                }\n                isAboveRoot = false;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === DOT && dots !== -1) {\n            ++dots;\n        }\n        else {\n            dots = -1;\n        }\n    }\n    return res;\n}\n", "// loaders.gl MIT license\nexport function getCWD() {\n    if (typeof process !== 'undefined' && typeof process.cwd !== 'undefined') {\n        return process.cwd();\n    }\n    const pathname = window.location?.pathname;\n    return pathname?.slice(0, pathname.lastIndexOf('/') + 1) || '';\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * BlobFile provides a \"file like interface\" to the data in a Blob or File object\n */\nexport class BlobFile {\n    handle;\n    size;\n    bigsize;\n    url;\n    constructor(blob) {\n        this.handle = blob instanceof ArrayBuffer ? new Blob([blob]) : blob;\n        this.size = blob instanceof ArrayBuffer ? blob.byteLength : blob.size;\n        this.bigsize = BigInt(this.size);\n        this.url = blob instanceof File ? blob.name : '';\n    }\n    async close() { }\n    async stat() {\n        return {\n            size: this.handle.size,\n            bigsize: BigInt(this.handle.size),\n            isDirectory: false\n        };\n    }\n    async read(start, length) {\n        const arrayBuffer = await this.handle\n            .slice(Number(start), Number(start) + Number(length))\n            .arrayBuffer();\n        return arrayBuffer;\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isBrowser } from \"../env-utils/globals.js\";\nconst NOT_IMPLEMENTED = new Error('Not implemented');\n/** This class is a facade that gets replaced with an actual NodeFile instance  */\nexport class NodeFileFacade {\n    handle;\n    size = 0;\n    bigsize = 0n;\n    url = '';\n    constructor(url, flags, mode) {\n        // Return the actual implementation instance\n        if (globalThis.loaders?.NodeFile) {\n            return new globalThis.loaders.NodeFile(url, flags, mode);\n        }\n        if (isBrowser) {\n            throw new Error('Can\\'t instantiate NodeFile in browser.');\n        }\n        throw new Error('Can\\'t instantiate NodeFile. Make sure to import @loaders.gl/polyfills first.');\n    }\n    /** Read data */\n    async read(start, length) {\n        throw NOT_IMPLEMENTED;\n    }\n    /** Write to file. The number of bytes written will be returned */\n    async write(arrayBuffer, offset, length) {\n        throw NOT_IMPLEMENTED;\n    }\n    /** Get information about file */\n    async stat() {\n        throw NOT_IMPLEMENTED;\n    }\n    /** Truncates the file descriptor. Only available on NodeFile. */\n    async truncate(length) {\n        throw NOT_IMPLEMENTED;\n    }\n    /** Append data to a file. Only available on NodeFile. */\n    async append(data) {\n        throw NOT_IMPLEMENTED;\n    }\n    /** Close the file */\n    async close() { }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isBrowser } from \"../env-utils/globals.js\";\nconst NOT_IMPLEMENTED = new Error('Not implemented');\n/**\n * FileSystem pass-through for Node.js\n * Compatible with BrowserFileSystem.\n * @note Dummy implementation, not used (constructor returns a real NodeFileSystem instance)\n * @param options\n */\nexport class NodeFileSystemFacade {\n    // implements FileSystem\n    constructor(options) {\n        if (globalThis.loaders?.NodeFileSystem) {\n            return new globalThis.loaders.NodeFileSystem(options);\n        }\n        if (isBrowser) {\n            throw new Error('Can\\'t instantiate NodeFileSystem in browser.');\n        }\n        throw new Error('Can\\'t instantiate NodeFileSystem. Make sure to import @loaders.gl/polyfills first.');\n    }\n    // DUMMY IMPLEMENTATION, not used (constructor returns a real NodeFileSystem instance)\n    // implements RandomAccessReadFileSystem\n    readable = true;\n    writable = true;\n    async openReadableFile(path, flags) {\n        throw NOT_IMPLEMENTED;\n    }\n    // implements RandomAccessWriteFileSystem\n    async openWritableFile(path, flags, mode) {\n        throw NOT_IMPLEMENTED;\n    }\n    // Implements file system\n    async readdir(dirname = '.', options) {\n        throw NOT_IMPLEMENTED;\n    }\n    async stat(path, options) {\n        throw NOT_IMPLEMENTED;\n    }\n    async unlink(path) {\n        throw NOT_IMPLEMENTED;\n    }\n    async fetch(path, options) {\n        throw NOT_IMPLEMENTED;\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** base class of all data sources */\nexport class DataSource {\n    /** A resolved fetch function extracted from loadOptions prop */\n    fetch;\n    /** The actual load options, if calling a loaders.gl loader */\n    loadOptions;\n    _needsRefresh = true;\n    props;\n    constructor(props) {\n        this.props = { ...props };\n        this.loadOptions = { ...props.loadOptions };\n        this.fetch = getFetchFunction(this.loadOptions);\n    }\n    setProps(props) {\n        this.props = Object.assign(this.props, props);\n        // TODO - add a shallow compare to avoid setting refresh if no change?\n        this.setNeedsRefresh();\n    }\n    /** Mark this data source as needing a refresh (redraw) */\n    setNeedsRefresh() {\n        this._needsRefresh = true;\n    }\n    /**\n     * Does this data source need refreshing?\n     * @note The specifics of the refresh mechanism depends on type of data source\n     */\n    getNeedsRefresh(clear = true) {\n        const needsRefresh = this._needsRefresh;\n        if (clear) {\n            this._needsRefresh = false;\n        }\n        return needsRefresh;\n    }\n}\n/**\n * Gets the current fetch function from options\n * @todo - move to loader-utils module\n * @todo - use in core module counterpart\n * @param options\n * @param context\n */\nexport function getFetchFunction(options) {\n    const fetchFunction = options?.fetch;\n    // options.fetch can be a function\n    if (fetchFunction && typeof fetchFunction === 'function') {\n        return (url, fetchOptions) => fetchFunction(url, fetchOptions);\n    }\n    // options.fetch can be an options object, use global fetch with those options\n    const fetchOptions = options?.fetch;\n    if (fetchOptions && typeof fetchOptions !== 'function') {\n        return (url) => fetch(url, fetchOptions);\n    }\n    // else return the global fetch function\n    return (url) => fetch(url);\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { DataSource } from \"./data-source.js\";\n/**\n * ImageSource - data sources that allow images to be queried by (geospatial) extents\n */\nexport class ImageSource extends DataSource {\n    static type = 'template';\n    static testURL = (url) => false;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst isBoolean = (x) => typeof x === 'boolean';\nconst isFunction = (x) => typeof x === 'function';\nexport const isObject = (x) => x !== null && typeof x === 'object';\nexport const isPureObject = (x) => isObject(x) && x.constructor === {}.constructor;\nexport const isPromise = (x) => isObject(x) && isFunction(x.then);\nexport const isIterable = (x) => Boolean(x) && typeof x[Symbol.iterator] === 'function';\nexport const isAsyncIterable = (x) => x && typeof x[Symbol.asyncIterator] === 'function';\nexport const isIterator = (x) => x && isFunction(x.next);\nexport const isResponse = (x) => (typeof Response !== 'undefined' && x instanceof Response) ||\n    (x && x.arrayBuffer && x.text && x.json);\nexport const isFile = (x) => typeof File !== 'undefined' && x instanceof File;\nexport const isBlob = (x) => typeof Blob !== 'undefined' && x instanceof Blob;\n/** Check for Node.js `Buffer` without triggering bundler to include buffer polyfill */\nexport const isBuffer = (x) => x && typeof x === 'object' && x.isBuffer;\nexport const isWritableDOMStream = (x) => isObject(x) && isFunction(x.abort) && isFunction(x.getWriter);\nexport const isReadableDOMStream = (x) => (typeof ReadableStream !== 'undefined' && x instanceof ReadableStream) ||\n    (isObject(x) && isFunction(x.tee) && isFunction(x.cancel) && isFunction(x.getReader));\n// Not implemented in Firefox: && isFunction(x.pipeTo)\nexport const isWritableNodeStream = (x) => isObject(x) && isFunction(x.end) && isFunction(x.write) && isBoolean(x.writable);\nexport const isReadableNodeStream = (x) => isObject(x) && isFunction(x.read) && isFunction(x.pipe) && isBoolean(x.readable);\nexport const isReadableStream = (x) => isReadableDOMStream(x) || isReadableNodeStream(x);\nexport const isWritableStream = (x) => isWritableDOMStream(x) || isWritableNodeStream(x);\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nexport class FetchError extends Error {\n    constructor(message, info) {\n        super(message);\n        this.reason = info.reason;\n        this.url = info.url;\n        this.response = info.response;\n    }\n    /** A best effort reason for why the fetch failed */\n    reason;\n    /** The URL that failed to load. Empty string if not available. */\n    url;\n    /** The Response object, if any. */\n    response;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// TODO - build/integrate proper MIME type parsing\n// https://mimesniff.spec.whatwg.org/\nconst DATA_URL_PATTERN = /^data:([-\\w.]+\\/[-\\w.+]+)(;|,)/;\nconst MIME_TYPE_PATTERN = /^([-\\w.]+\\/[-\\w.+]+)/;\n/**\n * Compare two MIME types, case insensitively etc.\n * @param mimeType1\n * @param mimeType2\n * @returns true if the MIME types are equivalent\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#structure_of_a_mime_type\n */\nexport function compareMIMETypes(mimeType1, mimeType2) {\n    if (mimeType1.toLowerCase() === mimeType2.toLowerCase()) {\n        return true;\n    }\n    return false;\n}\n/**\n * Remove extra data like `charset` from MIME types\n * @param mimeString\n * @returns A clean MIME type, or an empty string\n *\n * @todo - handle more advanced MIMETYpes, multiple types\n * @todo - extract charset etc\n */\nexport function parseMIMEType(mimeString) {\n    // If resource is a data url, extract any embedded mime type\n    const matches = MIME_TYPE_PATTERN.exec(mimeString);\n    if (matches) {\n        return matches[1];\n    }\n    return mimeString;\n}\n/**\n * Extract MIME type from data URL\n *\n * @param mimeString\n * @returns A clean MIME type, or an empty string\n *\n * @todo - handle more advanced MIMETYpes, multiple types\n * @todo - extract charset etc\n */\nexport function parseMIMETypeFromURL(url) {\n    // If resource is a data URL, extract any embedded mime type\n    const matches = DATA_URL_PATTERN.exec(url);\n    if (matches) {\n        return matches[1];\n    }\n    return '';\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst QUERY_STRING_PATTERN = /\\?.*/;\nexport function extractQueryString(url) {\n    const matches = url.match(QUERY_STRING_PATTERN);\n    return matches && matches[0];\n}\nexport function stripQueryString(url) {\n    return url.replace(QUERY_STRING_PATTERN, '');\n}\nexport function shortenUrlForDisplay(url) {\n    if (url.length < 50) {\n        return url;\n    }\n    const urlEnd = url.slice(url.length - 15);\n    const urlStart = url.substr(0, 32);\n    return `${urlStart}...${urlEnd}`;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isResponse, isBlob } from \"../../javascript-utils/is-type.js\";\nimport { parseMIMEType, parseMIMETypeFromURL } from \"./mime-type-utils.js\";\nimport { stripQueryString } from \"./url-utils.js\";\n/**\n * Returns the URL associated with this resource.\n * The returned value may include a query string and need further processing.\n * If it cannot determine url, the corresponding value will be an empty string\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceUrl(resource) {\n    // If resource is a `Response`, it contains the information directly as a field\n    if (isResponse(resource)) {\n        const response = resource;\n        return response.url;\n    }\n    // If the resource is a Blob or a File (subclass of Blob)\n    if (isBlob(resource)) {\n        const blob = resource;\n        // File objects have a \"name\" property. Blob objects don't have any\n        // url (name) information\n        return blob.name || '';\n    }\n    if (typeof resource === 'string') {\n        return resource;\n    }\n    // Unknown\n    return '';\n}\n/**\n * Returns the URL associated with this resource.\n * The returned value may include a query string and need further processing.\n * If it cannot determine url, the corresponding value will be an empty string\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceMIMEType(resource) {\n    // If resource is a response, it contains the information directly\n    if (isResponse(resource)) {\n        const response = resource;\n        const contentTypeHeader = response.headers.get('content-type') || '';\n        const noQueryUrl = stripQueryString(response.url);\n        return parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(noQueryUrl);\n    }\n    // If the resource is a Blob or a File (subclass of Blob)\n    if (isBlob(resource)) {\n        const blob = resource;\n        return blob.type || '';\n    }\n    if (typeof resource === 'string') {\n        return parseMIMETypeFromURL(resource);\n    }\n    // Unknown\n    return '';\n}\n/**\n  * Returns (approximate) content length for a resource if it can be determined.\n  * Returns -1 if content length cannot be determined.\n  * @param resource\n\n  * @note string parameters are NOT assumed to be URLs\n  */\nexport function getResourceContentLength(resource) {\n    if (isResponse(resource)) {\n        const response = resource;\n        return response.headers['content-length'] || -1;\n    }\n    if (isBlob(resource)) {\n        const blob = resource;\n        return blob.size;\n    }\n    if (typeof resource === 'string') {\n        // TODO - handle data URL?\n        return resource.length;\n    }\n    if (resource instanceof ArrayBuffer) {\n        return resource.byteLength;\n    }\n    if (ArrayBuffer.isView(resource)) {\n        return resource.byteLength;\n    }\n    return -1;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isResponse } from \"../../javascript-utils/is-type.js\";\nimport { FetchError } from \"../fetch/fetch-error.js\";\nimport { getResourceContentLength, getResourceUrl, getResourceMIMEType } from \"./resource-utils.js\";\nimport { shortenUrlForDisplay } from \"./url-utils.js\";\n/**\n * Returns a Response object\n * Adds content-length header when possible\n *\n * @param resource\n */\nexport async function makeResponse(resource) {\n    if (isResponse(resource)) {\n        return resource;\n    }\n    // Add content-length header if possible\n    const headers = {};\n    const contentLength = getResourceContentLength(resource);\n    if (contentLength >= 0) {\n        headers['content-length'] = String(contentLength);\n    }\n    // `new Response(File)` does not preserve content-type and URL\n    // so we add them here\n    const url = getResourceUrl(resource);\n    const type = getResourceMIMEType(resource);\n    if (type) {\n        headers['content-type'] = type;\n    }\n    // Add a custom header with initial bytes if available\n    const initialDataUrl = await getInitialDataUrl(resource);\n    if (initialDataUrl) {\n        headers['x-first-bytes'] = initialDataUrl;\n    }\n    // TODO - is this the best way of handling strings?\n    // Maybe package as data URL instead?\n    if (typeof resource === 'string') {\n        // Convert to ArrayBuffer to avoid Response treating it as a URL\n        resource = new TextEncoder().encode(resource);\n    }\n    // Attempt to create a Response from the resource, adding headers and setting url\n    const response = new Response(resource, { headers });\n    // We can't control `Response.url` via constructor, use a property override to record URL.\n    Object.defineProperty(response, 'url', { value: url });\n    return response;\n}\n/**\n * Checks response status (async) and throws a helpful error message if status is not OK.\n * @param response\n */\nexport async function checkResponse(response) {\n    if (!response.ok) {\n        const error = await getResponseError(response);\n        throw error;\n    }\n}\n/**\n * Checks response status (sync) and throws a helpful error message if status is not OK.\n * @param response\n */\nexport function checkResponseSync(response) {\n    if (!response.ok) {\n        let message = `${response.status} ${response.statusText}`;\n        message = message.length > 60 ? `${message.slice(0, 60)}...` : message;\n        throw new Error(message);\n    }\n}\n// HELPERS\nasync function getResponseError(response) {\n    const shortUrl = shortenUrlForDisplay(response.url);\n    let message = `Failed to fetch resource (${response.status}) ${response.statusText}: ${shortUrl}`;\n    message = message.length > 100 ? `${message.slice(0, 100)}...` : message;\n    const info = {\n        reason: response.statusText,\n        url: response.url,\n        response\n    };\n    // See if we got an error message in the body\n    try {\n        const contentType = response.headers.get('Content-Type');\n        info.reason =\n            !response.bodyUsed && contentType?.includes('application/json')\n                ? await response.json()\n                : await response.text();\n    }\n    catch (error) {\n        // eslint forbids return in a finally statement, so we just catch here\n    }\n    return new FetchError(message, info);\n}\nasync function getInitialDataUrl(resource) {\n    const INITIAL_DATA_LENGTH = 5;\n    if (typeof resource === 'string') {\n        return `data:,${resource.slice(0, INITIAL_DATA_LENGTH)}`;\n    }\n    if (resource instanceof Blob) {\n        const blobSlice = resource.slice(0, 5);\n        return await new Promise((resolve) => {\n            const reader = new FileReader();\n            reader.onload = (event) => resolve(event?.target?.result);\n            reader.readAsDataURL(blobSlice);\n        });\n    }\n    if (resource instanceof ArrayBuffer) {\n        const slice = resource.slice(0, INITIAL_DATA_LENGTH);\n        const base64 = arrayBufferToBase64(slice);\n        return `data:base64,${base64}`;\n    }\n    return null;\n}\n// https://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string\nfunction arrayBufferToBase64(buffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { resolvePath } from '@loaders.gl/loader-utils';\nimport { makeResponse } from \"../utils/response-utils.js\";\n// import {FetchError} from './fetch-error';\nexport function isNodePath(url) {\n    return !isRequestURL(url) && !isDataURL(url);\n}\nexport function isRequestURL(url) {\n    return url.startsWith('http:') || url.startsWith('https:');\n}\nexport function isDataURL(url) {\n    return url.startsWith('data:');\n}\n/**\n * fetch API compatible function\n * - Supports fetching from Node.js local file system paths\n * - Respects pathPrefix and file aliases\n */\nexport async function fetchFile(urlOrData, fetchOptions) {\n    if (typeof urlOrData === 'string') {\n        const url = resolvePath(urlOrData);\n        // Support fetching from local file system\n        if (isNodePath(url)) {\n            if (globalThis.loaders?.fetchNode) {\n                return globalThis.loaders?.fetchNode(url, fetchOptions);\n            }\n            // throw new Error(\n            //   'fetchFile: globalThis.loaders.fetchNode not defined. Install @loaders.gl/polyfills'\n            // );\n        }\n        // Call global fetch\n        return await fetch(url, fetchOptions);\n    }\n    // TODO - should we still call fetch on non-URL inputs?\n    return await makeResponse(urlOrData);\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Reads a chunk from a random access file\n * @param file\n * @param start\n * @param length\n * @returns\n */\nexport async function readArrayBuffer(file, start, length) {\n    // TODO - we can do better for ArrayBuffer and string\n    if (!(file instanceof Blob)) {\n        file = new Blob([file]);\n    }\n    const slice = file.slice(start, start + length);\n    return await readBlob(slice);\n}\n/**\n * Read a slice of a Blob or File, without loading the entire file into memory\n * The trick when reading File objects is to read successive \"slices\" of the File\n * Per spec https://w3c.github.io/FileAPI/, slicing a File only updates the start and end fields\n * Actually reading from file happens in `readAsArrayBuffer`\n * @param blob to read\n */\nexport async function readBlob(blob) {\n    return await new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.onload = (event) => resolve(event?.target?.result);\n        // TODO - reject with a proper Error\n        fileReader.onerror = (error) => reject(error);\n        fileReader.readAsArrayBuffer(blob);\n    });\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// probe.gl Log compatible loggers\nimport { Log } from '@probe.gl/log';\nexport const probeLog = new Log({ id: 'loaders.gl' });\n// Logs nothing\nexport class NullLog {\n    log() {\n        return () => { };\n    }\n    info() {\n        return () => { };\n    }\n    warn() {\n        return () => { };\n    }\n    error() {\n        return () => { };\n    }\n}\n// Logs to console\nexport class ConsoleLog {\n    console;\n    constructor() {\n        this.console = console; // eslint-disable-line\n    }\n    log(...args) {\n        return this.console.log.bind(this.console, ...args);\n    }\n    info(...args) {\n        return this.console.info.bind(this.console, ...args);\n    }\n    warn(...args) {\n        return this.console.warn.bind(this.console, ...args);\n    }\n    error(...args) {\n        return this.console.error.bind(this.console, ...args);\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isBrowser } from '@loaders.gl/loader-utils';\nimport { ConsoleLog } from \"./loggers.js\";\nexport const DEFAULT_LOADER_OPTIONS = {\n    // baseUri\n    fetch: null,\n    mimeType: undefined,\n    nothrow: false,\n    log: new ConsoleLog(), // A probe.gl compatible (`log.log()()` syntax) that just logs to console\n    useLocalLibraries: false,\n    CDN: 'https://unpkg.com/@loaders.gl',\n    worker: true, // By default, use worker if provided by loader.\n    maxConcurrency: 3, // How many worker instances should be created for each loader.\n    maxMobileConcurrency: 1, // How many worker instances should be created for each loader on mobile devices.\n    reuseWorkers: isBrowser, // By default reuse workers in browser (Node.js refuses to terminate if browsers are running)\n    _nodeWorkers: false, // By default do not support node workers\n    _workerType: '', // 'test' to use locally generated workers\n    limit: 0,\n    _limitMB: 0,\n    batchSize: 'auto',\n    batchDebounceMs: 0,\n    metadata: false, // TODO - currently only implemented for parseInBatches, adds initial metadata batch,\n    transforms: []\n};\nexport const REMOVED_LOADER_OPTIONS = {\n    throws: 'nothrow',\n    dataType: '(no longer used)',\n    uri: 'baseUri',\n    // Warn if fetch options are used on top-level\n    method: 'fetch.method',\n    headers: 'fetch.headers',\n    body: 'fetch.body',\n    mode: 'fetch.mode',\n    credentials: 'fetch.credentials',\n    cache: 'fetch.cache',\n    redirect: 'fetch.redirect',\n    referrer: 'fetch.referrer',\n    referrerPolicy: 'fetch.referrerPolicy',\n    integrity: 'fetch.integrity',\n    keepalive: 'fetch.keepalive',\n    signal: 'fetch.signal'\n};\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { registerJSModules } from '@loaders.gl/loader-utils';\nimport { isPureObject, isObject } from \"../../javascript-utils/is-type.js\";\nimport { probeLog, NullLog } from \"./loggers.js\";\nimport { DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS } from \"./option-defaults.js\";\n/**\n * Helper for safely accessing global loaders.gl variables\n * Wraps initialization of global variable in function to defeat overly aggressive tree-shakers\n */\nexport function getGlobalLoaderState() {\n    // @ts-ignore\n    globalThis.loaders = globalThis.loaders || {};\n    // @ts-ignore\n    const { loaders } = globalThis;\n    // Add _state object to keep separate from modules added to globalThis.loaders\n    if (!loaders._state) {\n        loaders._state = {};\n    }\n    return loaders._state;\n}\n/**\n * Store global loader options on the global object to increase chances of cross loaders-version interoperability\n * NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\n * @returns global loader options merged with default loader options\n */\nexport function getGlobalLoaderOptions() {\n    const state = getGlobalLoaderState();\n    // Ensure all default loader options from this library are mentioned\n    state.globalOptions = state.globalOptions || { ...DEFAULT_LOADER_OPTIONS };\n    return state.globalOptions;\n}\n/**\n * Set global loader options\n * @param options\n */\nexport function setGlobalOptions(options) {\n    const state = getGlobalLoaderState();\n    const globalOptions = getGlobalLoaderOptions();\n    // @ts-expect-error First param looks incorrect\n    state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n    // Make sure any new modules are registered\n    registerJSModules(options.modules);\n}\n/**\n * Merges options with global opts and loader defaults, also injects baseUri\n * @param options\n * @param loader\n * @param loaders\n * @param url\n */\nexport function normalizeOptions(options, loader, loaders, url) {\n    loaders = loaders || [];\n    loaders = Array.isArray(loaders) ? loaders : [loaders];\n    validateOptions(options, loaders);\n    return normalizeOptionsInternal(loader, options, url);\n}\n// VALIDATE OPTIONS\n/**\n * Warn for unsupported options\n * @param options\n * @param loaders\n */\nfunction validateOptions(options, loaders) {\n    // Check top level options\n    validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);\n    for (const loader of loaders) {\n        // Get the scoped, loader specific options from the user supplied options\n        const idOptions = ((options && options[loader.id]) || {});\n        // Get scoped, loader specific default and deprecated options from the selected loader\n        const loaderOptions = (loader.options && loader.options[loader.id]) || {};\n        const deprecatedOptions = (loader.deprecatedOptions && loader.deprecatedOptions[loader.id]) || {};\n        // Validate loader specific options\n        // @ts-ignore\n        validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);\n    }\n}\n// eslint-disable-next-line max-params, complexity\nfunction validateOptionsObject(options, id, defaultOptions, deprecatedOptions, loaders) {\n    const loaderName = id || 'Top level';\n    const prefix = id ? `${id}.` : '';\n    for (const key in options) {\n        // If top level option value is an object it could options for a loader, so ignore\n        const isSubOptions = !id && isObject(options[key]);\n        const isBaseUriOption = key === 'baseUri' && !id;\n        const isWorkerUrlOption = key === 'workerUrl' && id;\n        // <loader>.workerUrl requires special handling as it is now auto-generated and no longer specified as a default option.\n        if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {\n            // Issue deprecation warnings\n            if (key in deprecatedOptions) {\n                probeLog.warn(`${loaderName} loader option \\'${prefix}${key}\\' no longer supported, use \\'${deprecatedOptions[key]}\\'`)();\n            }\n            else if (!isSubOptions) {\n                const suggestion = findSimilarOption(key, loaders);\n                probeLog.warn(`${loaderName} loader option \\'${prefix}${key}\\' not recognized. ${suggestion}`)();\n            }\n        }\n    }\n}\nfunction findSimilarOption(optionKey, loaders) {\n    const lowerCaseOptionKey = optionKey.toLowerCase();\n    let bestSuggestion = '';\n    for (const loader of loaders) {\n        for (const key in loader.options) {\n            if (optionKey === key) {\n                return `Did you mean \\'${loader.id}.${key}\\'?`;\n            }\n            const lowerCaseKey = key.toLowerCase();\n            const isPartialMatch = lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n            if (isPartialMatch) {\n                bestSuggestion = bestSuggestion || `Did you mean \\'${loader.id}.${key}\\'?`;\n            }\n        }\n    }\n    return bestSuggestion;\n}\nfunction normalizeOptionsInternal(loader, options, url) {\n    const loaderDefaultOptions = loader.options || {};\n    const mergedOptions = { ...loaderDefaultOptions };\n    addUrlOptions(mergedOptions, url);\n    // LOGGING: options.log can be set to `null` to defeat logging\n    if (mergedOptions.log === null) {\n        mergedOptions.log = new NullLog();\n    }\n    mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n    mergeNestedFields(mergedOptions, options);\n    return mergedOptions;\n}\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n    for (const key in options) {\n        // Check for nested options\n        // object in options => either no key in defaultOptions or object in defaultOptions\n        if (key in options) {\n            const value = options[key];\n            if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n                mergedOptions[key] = {\n                    ...mergedOptions[key],\n                    ...options[key]\n                };\n            }\n            else {\n                mergedOptions[key] = options[key];\n            }\n        }\n        // else: No need to merge nested opts, and the initial merge already copied over the nested options\n    }\n}\n/**\n * Harvest information from the url\n * @deprecated This is mainly there to support a hack in the GLTFLoader\n * TODO - baseUri should be a directory, i.e. remove file component from baseUri\n * TODO - extract extension?\n * TODO - extract query parameters?\n * TODO - should these be injected on context instead of options?\n */\nfunction addUrlOptions(options, url) {\n    if (url && !('baseUri' in options)) {\n        options.baseUri = url;\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { assert } from '@loaders.gl/loader-utils';\nexport function isLoaderObject(loader) {\n    if (!loader) {\n        return false;\n    }\n    if (Array.isArray(loader)) {\n        loader = loader[0];\n    }\n    const hasExtensions = Array.isArray(loader?.extensions);\n    /* Now handled by types and worker loaders do not have these\n    let hasParser =\n      loader.parseTextSync ||\n      loader.parseSync ||\n      loader.parse ||\n      loader.parseStream || // TODO Remove, Replace with parseInBatches\n      loader.parseInBatches;\n    */\n    return hasExtensions;\n}\nexport function normalizeLoader(loader) {\n    // This error is fairly easy to trigger by mixing up import statements etc\n    // So we make an exception and add a developer error message for this case\n    // To help new users from getting stuck here\n    assert(loader, 'null loader');\n    assert(isLoaderObject(loader), 'invalid loader');\n    // NORMALIZE [LOADER, OPTIONS] => LOADER\n    // If [loader, options], create a new loaders object with options merged in\n    let options;\n    if (Array.isArray(loader)) {\n        options = loader[1];\n        loader = loader[0];\n        loader = {\n            ...loader,\n            options: { ...loader.options, ...options }\n        };\n    }\n    // NORMALIZE text and binary flags\n    // Ensure at least one of text/binary flags are properly set\n    // @ts-expect-error\n    if (loader?.parseTextSync || loader?.parseText) {\n        loader.text = true;\n    }\n    if (!loader.text) {\n        loader.binary = true;\n    }\n    return loader;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { normalizeLoader } from \"../loader-utils/normalize-loader.js\";\nimport { getGlobalLoaderState } from \"../loader-utils/option-utils.js\";\n/**\n * Store global registered loaders on the global object to increase chances of cross loaders-version interoperability\n * This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\n */\nconst getGlobalLoaderRegistry = () => {\n    const state = getGlobalLoaderState();\n    state.loaderRegistry = state.loaderRegistry || [];\n    return state.loaderRegistry;\n};\n/**\n * Register a list of global loaders\n * @note Registration erases loader type information.\n * @deprecated It is recommended that applications manage loader registration. This function will likely be remove in loaders.gl v5\n */\nexport function registerLoaders(loaders) {\n    const loaderRegistry = getGlobalLoaderRegistry();\n    loaders = Array.isArray(loaders) ? loaders : [loaders];\n    for (const loader of loaders) {\n        const normalizedLoader = normalizeLoader(loader);\n        if (!loaderRegistry.find((registeredLoader) => normalizedLoader === registeredLoader)) {\n            // add to the beginning of the loaderRegistry, so the last registeredLoader get picked\n            loaderRegistry.unshift(normalizedLoader);\n        }\n    }\n}\n/**\n * @deprecated It is recommended that applications manage loader registration. This function will likely be remove in loaders.gl v5\n */\nexport function getRegisteredLoaders() {\n    return getGlobalLoaderRegistry();\n}\n/** @deprecated For testing only  */\nexport function _unregisterLoaders() {\n    const state = getGlobalLoaderState();\n    state.loaderRegistry = [];\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { compareArrayBuffers, path, log } from '@loaders.gl/loader-utils';\nimport { normalizeLoader } from \"../loader-utils/normalize-loader.js\";\nimport { getResourceUrl, getResourceMIMEType } from \"../utils/resource-utils.js\";\nimport { compareMIMETypes } from \"../utils/mime-type-utils.js\";\nimport { getRegisteredLoaders } from \"./register-loaders.js\";\nimport { isBlob } from \"../../javascript-utils/is-type.js\";\nimport { stripQueryString } from \"../utils/url-utils.js\";\nconst EXT_PATTERN = /\\.([^.]+)$/;\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport async function selectLoader(data, loaders = [], options, context) {\n    if (!validHTTPResponse(data)) {\n        return null;\n    }\n    // First make a sync attempt, disabling exceptions\n    let loader = selectLoaderSync(data, loaders, { ...options, nothrow: true }, context);\n    if (loader) {\n        return loader;\n    }\n    // For Blobs and Files, try to asynchronously read a small initial slice and test again with that\n    // to see if we can detect by initial content\n    if (isBlob(data)) {\n        data = await data.slice(0, 10).arrayBuffer();\n        loader = selectLoaderSync(data, loaders, options, context);\n    }\n    // no loader available\n    if (!loader && !options?.nothrow) {\n        throw new Error(getNoValidLoaderMessage(data));\n    }\n    return loader;\n}\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport function selectLoaderSync(data, loaders = [], options, context) {\n    if (!validHTTPResponse(data)) {\n        return null;\n    }\n    // eslint-disable-next-line complexity\n    // if only a single loader was provided (not as array), force its use\n    // TODO - Should this behavior be kept and documented?\n    if (loaders && !Array.isArray(loaders)) {\n        // TODO - remove support for legacy loaders\n        return normalizeLoader(loaders);\n    }\n    // Build list of candidate loaders that will be searched in order for a match\n    let candidateLoaders = [];\n    // First search supplied loaders\n    if (loaders) {\n        candidateLoaders = candidateLoaders.concat(loaders);\n    }\n    // Then fall back to registered loaders\n    if (!options?.ignoreRegisteredLoaders) {\n        candidateLoaders.push(...getRegisteredLoaders());\n    }\n    // TODO - remove support for legacy loaders\n    normalizeLoaders(candidateLoaders);\n    const loader = selectLoaderInternal(data, candidateLoaders, options, context);\n    // no loader available\n    if (!loader && !options?.nothrow) {\n        throw new Error(getNoValidLoaderMessage(data));\n    }\n    return loader;\n}\n/** Implements loaders selection logic */\n// eslint-disable-next-line complexity\nfunction selectLoaderInternal(data, loaders, options, context) {\n    const url = getResourceUrl(data);\n    const type = getResourceMIMEType(data);\n    const testUrl = stripQueryString(url) || context?.url;\n    let loader = null;\n    let reason = '';\n    // if options.mimeType is supplied, it takes precedence\n    if (options?.mimeType) {\n        loader = findLoaderByMIMEType(loaders, options?.mimeType);\n        reason = `match forced by supplied MIME type ${options?.mimeType}`;\n    }\n    // Look up loader by url\n    loader = loader || findLoaderByUrl(loaders, testUrl);\n    reason = reason || (loader ? `matched url ${testUrl}` : '');\n    // Look up loader by mime type\n    loader = loader || findLoaderByMIMEType(loaders, type);\n    reason = reason || (loader ? `matched MIME type ${type}` : '');\n    // Look for loader via initial bytes (Note: not always accessible (e.g. Response, stream, async iterator)\n    // @ts-ignore Blob | Response\n    loader = loader || findLoaderByInitialBytes(loaders, data);\n    // @ts-ignore Blob | Response\n    reason = reason || (loader ? `matched initial data ${getFirstCharacters(data)}` : '');\n    // Look up loader by fallback mime type\n    if (options?.fallbackMimeType) {\n        loader = loader || findLoaderByMIMEType(loaders, options?.fallbackMimeType);\n        reason = reason || (loader ? `matched fallback MIME type ${type}` : '');\n    }\n    if (reason) {\n        log.log(1, `selectLoader selected ${loader?.name}: ${reason}.`);\n    }\n    return loader;\n}\n/** Check HTTP Response */\nfunction validHTTPResponse(data) {\n    // HANDLE HTTP status\n    if (data instanceof Response) {\n        // 204 - NO CONTENT. This handles cases where e.g. a tile server responds with 204 for a missing tile\n        if (data.status === 204) {\n            return false;\n        }\n    }\n    return true;\n}\n/** Generate a helpful message to help explain why loader selection failed. */\nfunction getNoValidLoaderMessage(data) {\n    const url = getResourceUrl(data);\n    const type = getResourceMIMEType(data);\n    let message = 'No valid loader found (';\n    message += url ? `${path.filename(url)}, ` : 'no url provided, ';\n    message += `MIME type: ${type ? `\"${type}\"` : 'not provided'}, `;\n    // First characters are only accessible when called on data (string or arrayBuffer).\n    // @ts-ignore Blob | Response\n    const firstCharacters = data ? getFirstCharacters(data) : '';\n    message += firstCharacters ? ` first bytes: \"${firstCharacters}\"` : 'first bytes: not available';\n    message += ')';\n    return message;\n}\nfunction normalizeLoaders(loaders) {\n    for (const loader of loaders) {\n        normalizeLoader(loader);\n    }\n}\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders, url) {\n    // Get extension\n    const match = url && EXT_PATTERN.exec(url);\n    const extension = match && match[1];\n    return extension ? findLoaderByExtension(loaders, extension) : null;\n}\nfunction findLoaderByExtension(loaders, extension) {\n    extension = extension.toLowerCase();\n    for (const loader of loaders) {\n        for (const loaderExtension of loader.extensions) {\n            if (loaderExtension.toLowerCase() === extension) {\n                return loader;\n            }\n        }\n    }\n    return null;\n}\nfunction findLoaderByMIMEType(loaders, mimeType) {\n    for (const loader of loaders) {\n        if (loader.mimeTypes?.some((mimeType1) => compareMIMETypes(mimeType, mimeType1))) {\n            return loader;\n        }\n        // Support referring to loaders using the \"unregistered tree\"\n        // https://en.wikipedia.org/wiki/Media_type#Unregistered_tree\n        if (compareMIMETypes(mimeType, `application/x.${loader.id}`)) {\n            return loader;\n        }\n    }\n    return null;\n}\nfunction findLoaderByInitialBytes(loaders, data) {\n    if (!data) {\n        return null;\n    }\n    for (const loader of loaders) {\n        if (typeof data === 'string') {\n            if (testDataAgainstText(data, loader)) {\n                return loader;\n            }\n        }\n        else if (ArrayBuffer.isView(data)) {\n            // Typed Arrays can have offsets into underlying buffer\n            if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n                return loader;\n            }\n        }\n        else if (data instanceof ArrayBuffer) {\n            const byteOffset = 0;\n            if (testDataAgainstBinary(data, byteOffset, loader)) {\n                return loader;\n            }\n        }\n        // TODO Handle streaming case (requires creating a new AsyncIterator)\n    }\n    return null;\n}\nfunction testDataAgainstText(data, loader) {\n    if (loader.testText) {\n        return loader.testText(data);\n    }\n    const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n    return tests.some((test) => data.startsWith(test));\n}\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n    const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n    return tests.some((test) => testBinary(data, byteOffset, loader, test));\n}\nfunction testBinary(data, byteOffset, loader, test) {\n    if (test instanceof ArrayBuffer) {\n        return compareArrayBuffers(test, data, test.byteLength);\n    }\n    switch (typeof test) {\n        case 'function':\n            return test(data);\n        case 'string':\n            // Magic bytes check: If `test` is a string, check if binary data starts with that strings\n            const magic = getMagicString(data, byteOffset, test.length);\n            return test === magic;\n        default:\n            return false;\n    }\n}\nfunction getFirstCharacters(data, length = 5) {\n    if (typeof data === 'string') {\n        return data.slice(0, length);\n    }\n    else if (ArrayBuffer.isView(data)) {\n        // Typed Arrays can have offsets into underlying buffer\n        return getMagicString(data.buffer, data.byteOffset, length);\n    }\n    else if (data instanceof ArrayBuffer) {\n        const byteOffset = 0;\n        return getMagicString(data, byteOffset, length);\n    }\n    return '';\n}\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n    if (arrayBuffer.byteLength < byteOffset + length) {\n        return '';\n    }\n    const dataView = new DataView(arrayBuffer);\n    let magic = '';\n    for (let i = 0; i < length; i++) {\n        magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n    }\n    return magic;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n/**\n * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers\n * @param blob string to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeStringIterator(string, options) {\n    const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n    let offset = 0;\n    const textEncoder = new TextEncoder();\n    while (offset < string.length) {\n        // Create a chunk of the right size\n        const chunkLength = Math.min(string.length - offset, chunkSize);\n        const chunk = string.slice(offset, offset + chunkLength);\n        offset += chunkLength;\n        // yield an ArrayBuffer chunk\n        yield textEncoder.encode(chunk);\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n/**\n * Returns an iterator that breaks a big ArrayBuffer into chunks and yields them one-by-one\n * @param blob ArrayBuffer to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeArrayBufferIterator(arrayBuffer, options = {}) {\n    const { chunkSize = DEFAULT_CHUNK_SIZE } = options;\n    let byteOffset = 0;\n    while (byteOffset < arrayBuffer.byteLength) {\n        // Create a chunk of the right size\n        const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n        const chunk = new ArrayBuffer(chunkByteLength);\n        // Copy data from the big chunk\n        const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n        const chunkArray = new Uint8Array(chunk);\n        chunkArray.set(sourceArray);\n        // yield the chunk\n        byteOffset += chunkByteLength;\n        yield chunk;\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB — biggest value that keeps UI responsive\n/**\n * Returns an iterator that breaks a big Blob into chunks and yields them one-by-one\n * @param blob Blob or File object\n * @param options\n * @param options.chunkSize\n */\nexport async function* makeBlobIterator(blob, options) {\n    const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n    let offset = 0;\n    while (offset < blob.size) {\n        const end = offset + chunkSize;\n        const chunk = await blob.slice(offset, end).arrayBuffer();\n        offset = end;\n        yield chunk;\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isBrowser, toArrayBuffer } from '@loaders.gl/loader-utils';\n/**\n * Returns an async iterable that reads from a stream (works in both Node.js and browsers)\n * @param stream stream to iterator over\n */\nexport function makeStreamIterator(stream, options) {\n    return isBrowser\n        ? makeBrowserStreamIterator(stream, options)\n        : makeNodeStreamIterator(stream, options);\n}\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @see https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\nasync function* makeBrowserStreamIterator(stream, options) {\n    // WhatWG: stream is supposed to have a `getIterator` method\n    // if (typeof stream.getIterator === 'function') {\n    //   return stream.getIterator();\n    // }\n    // if (typeof stream[Symbol.asyncIterator] === 'function') {\n    //   return makeToArrayBufferIterator(stream);\n    // }\n    // In the browser, we first need to get a lock on the stream\n    const reader = stream.getReader();\n    let nextBatchPromise;\n    try {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const currentBatchPromise = nextBatchPromise || reader.read();\n            // Issue a read for an additional batch, while we await the next batch\n            // Idea is to make fetching happen in parallel with processing / parsing\n            if (options?._streamReadAhead) {\n                nextBatchPromise = reader.read();\n            }\n            // Read from the stream\n            // value is a Uint8Array\n            const { done, value } = await currentBatchPromise;\n            // Exit if we're done\n            if (done) {\n                return;\n            }\n            // Else yield the chunk\n            yield toArrayBuffer(value);\n        }\n    }\n    catch (error) {\n        // TODO - examples makes it look like this should always be called,\n        // but that generates exceptions so only call it if we do not reach the end\n        reader.releaseLock();\n    }\n}\n/**\n * Returns an async iterable that reads from a DOM (browser) stream\n * @param stream stream to iterate from\n * @note Requires Node.js >= 10\n */\nasync function* makeNodeStreamIterator(stream, options) {\n    // Hacky test for node version to ensure we don't call bad polyfills\n    // NODE 10+: stream is an asyncIterator\n    for await (const chunk of stream) {\n        yield toArrayBuffer(chunk); // Coerce each chunk to ArrayBuffer\n    }\n}\n/* TODO - remove NODE < 10\n * @see https://github.com/bustle/streaming-iterables, MIT license\n *\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return;\n  }\n\n  // TODO - check if is this ever used in Node 10+?\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const data = stream.read();\n    if (data !== null) {\n      yield toArrayBuffer(data);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (stream._readableState?.ended) {\n      return;\n    }\n    await onceReadable(stream);\n  }\n\nasync function onceReadable(stream: Readable): Promise<any> {\n  return new Promise((resolve) => {\n    stream.once('readable', resolve);\n  });\n}\n  */\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { makeStringIterator } from \"./make-string-iterator.js\";\nimport { makeArrayBufferIterator } from \"./make-array-buffer-iterator.js\";\nimport { makeBlobIterator } from \"./make-blob-iterator.js\";\nimport { makeStreamIterator } from \"./make-stream-iterator.js\";\nimport { isBlob, isReadableStream, isResponse } from \"../../javascript-utils/is-type.js\";\n/**\n * Returns an iterator that breaks its input into chunks and yields them one-by-one.\n * @param data\n * @param options\n * @returns\n * This function can e.g. be used to enable data sources that can only be read atomically\n * (such as `Blob` and `File` via `FileReader`) to still be parsed in batches.\n */\nexport function makeIterator(data, options) {\n    if (typeof data === 'string') {\n        // Note: Converts string chunks to binary\n        return makeStringIterator(data, options);\n    }\n    if (data instanceof ArrayBuffer) {\n        return makeArrayBufferIterator(data, options);\n    }\n    if (isBlob(data)) {\n        return makeBlobIterator(data, options);\n    }\n    if (isReadableStream(data)) {\n        return makeStreamIterator(data, options);\n    }\n    if (isResponse(data)) {\n        const response = data;\n        return makeStreamIterator(response.body, options);\n    }\n    throw new Error('makeIterator');\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { concatenateArrayBuffersAsync } from '@loaders.gl/loader-utils';\nimport { isResponse, isReadableStream, isAsyncIterable, isIterable, isIterator, isBlob, isBuffer } from \"../../javascript-utils/is-type.js\";\nimport { makeIterator } from \"../../iterators/make-iterator/make-iterator.js\";\nimport { checkResponse, makeResponse } from \"../utils/response-utils.js\";\nconst ERR_DATA = 'Cannot convert supplied data type';\n// eslint-disable-next-line complexity\nexport function getArrayBufferOrStringFromDataSync(data, loader, options) {\n    if (loader.text && typeof data === 'string') {\n        return data;\n    }\n    if (isBuffer(data)) {\n        // @ts-ignore\n        data = data.buffer;\n    }\n    if (data instanceof ArrayBuffer) {\n        const arrayBuffer = data;\n        if (loader.text && !loader.binary) {\n            const textDecoder = new TextDecoder('utf8');\n            return textDecoder.decode(arrayBuffer);\n        }\n        return arrayBuffer;\n    }\n    // We may need to handle offsets\n    if (ArrayBuffer.isView(data)) {\n        // TextDecoder is invoked on typed arrays and will handle offsets\n        if (loader.text && !loader.binary) {\n            const textDecoder = new TextDecoder('utf8');\n            return textDecoder.decode(data);\n        }\n        let arrayBuffer = data.buffer;\n        // Since we are returning the underlying arrayBuffer, we must create a new copy\n        // if this typed array / Buffer is a partial view into the ArryayBuffer\n        // TODO - this is a potentially unnecessary copy\n        const byteLength = data.byteLength || data.length;\n        if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\n            // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\n            arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\n        }\n        return arrayBuffer;\n    }\n    throw new Error(ERR_DATA);\n}\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader, options) {\n    const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n    if (typeof data === 'string' || isArrayBuffer) {\n        return getArrayBufferOrStringFromDataSync(data, loader, options);\n    }\n    // Blobs and files are FileReader compatible\n    if (isBlob(data)) {\n        data = await makeResponse(data);\n    }\n    if (isResponse(data)) {\n        const response = data;\n        await checkResponse(response);\n        return loader.binary ? await response.arrayBuffer() : await response.text();\n    }\n    if (isReadableStream(data)) {\n        // @ts-expect-error TS2559 options type\n        data = makeIterator(data, options);\n    }\n    if (isIterable(data) || isAsyncIterable(data)) {\n        // Assume arrayBuffer iterator - attempt to concatenate\n        return concatenateArrayBuffersAsync(data);\n    }\n    throw new Error(ERR_DATA);\n}\nexport async function getAsyncIterableFromData(data, options) {\n    if (isIterator(data)) {\n        return data;\n    }\n    if (isResponse(data)) {\n        const response = data;\n        // Note Since this function is not async, we currently can't load error message, just status\n        await checkResponse(response);\n        // TODO - bug in polyfill, body can be a Promise under Node.js\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        const body = await response.body;\n        // TODO - body can be null?\n        return makeIterator(body, options);\n    }\n    if (isBlob(data) || isReadableStream(data)) {\n        return makeIterator(data, options);\n    }\n    if (isAsyncIterable(data)) {\n        return data;\n    }\n    return getIterableFromData(data);\n}\nexport async function getReadableStream(data) {\n    if (isReadableStream(data)) {\n        return data;\n    }\n    if (isResponse(data)) {\n        // @ts-ignore\n        return data.body;\n    }\n    const response = await makeResponse(data);\n    // @ts-ignore\n    return response.body;\n}\n// HELPERS\nfunction getIterableFromData(data) {\n    // generate an iterator that emits a single chunk\n    if (ArrayBuffer.isView(data)) {\n        return (function* oneChunk() {\n            yield data.buffer;\n        })();\n    }\n    if (data instanceof ArrayBuffer) {\n        return (function* oneChunk() {\n            yield data;\n        })();\n    }\n    if (isIterator(data)) {\n        return data;\n    }\n    if (isIterable(data)) {\n        return data[Symbol.iterator]();\n    }\n    throw new Error(ERR_DATA);\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isObject } from \"../../javascript-utils/is-type.js\";\nimport { fetchFile } from \"../fetch/fetch-file.js\";\nimport { getGlobalLoaderOptions } from \"./option-utils.js\";\n/**\n * Gets the current fetch function from options and context\n * @param options\n * @param context\n */\nexport function getFetchFunction(options, context) {\n    const globalOptions = getGlobalLoaderOptions();\n    const loaderOptions = options || globalOptions;\n    // options.fetch can be a function\n    if (typeof loaderOptions.fetch === 'function') {\n        return loaderOptions.fetch;\n    }\n    // options.fetch can be an options object\n    if (isObject(loaderOptions.fetch)) {\n        return (url) => fetchFile(url, loaderOptions.fetch);\n    }\n    // else refer to context (from parent loader) if available\n    if (context?.fetch) {\n        return context?.fetch;\n    }\n    // else return the default fetch function\n    return fetchFile;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { getFetchFunction } from \"./get-fetch-function.js\";\nimport { extractQueryString, stripQueryString } from \"../utils/url-utils.js\";\nimport { path } from '@loaders.gl/loader-utils';\n/**\n * \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n * The context will inject core methods like `parse` and contain information\n * about loaders and options passed in to the top-level `parse` call.\n *\n * @param context\n * @param options\n * @param previousContext\n */\nexport function getLoaderContext(context, options, parentContext) {\n    // For recursive calls, we already have a context\n    // TODO - add any additional loaders to context?\n    if (parentContext) {\n        return parentContext;\n    }\n    const newContext = {\n        fetch: getFetchFunction(options, context),\n        ...context\n    };\n    // Parse URLs so that subloaders can easily generate correct strings\n    if (newContext.url) {\n        const baseUrl = stripQueryString(newContext.url);\n        newContext.baseUrl = baseUrl;\n        newContext.queryString = extractQueryString(newContext.url);\n        newContext.filename = path.filename(baseUrl);\n        newContext.baseUrl = path.dirname(baseUrl);\n    }\n    // Recursive loading does not use single loader\n    if (!Array.isArray(newContext.loaders)) {\n        newContext.loaders = null;\n    }\n    return newContext;\n}\n// eslint-disable-next-line complexity\nexport function getLoadersFromContext(loaders, context) {\n    // A single loader (non-array) indicates no selection desired. Force select.\n    if (loaders && !Array.isArray(loaders)) {\n        return loaders;\n    }\n    // Create a merged list\n    let candidateLoaders;\n    if (loaders) {\n        candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n    }\n    if (context && context.loaders) {\n        const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n        candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n    }\n    // If no loaders, return null to look in globally registered loaders\n    return candidateLoaders && candidateLoaders.length ? candidateLoaders : undefined;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { parseWithWorker, canParseWithWorker, mergeLoaderOptions } from '@loaders.gl/loader-utils';\nimport { assert, validateWorkerVersion } from '@loaders.gl/worker-utils';\nimport { isLoaderObject } from \"../loader-utils/normalize-loader.js\";\nimport { isResponse } from \"../../javascript-utils/is-type.js\";\nimport { normalizeOptions } from \"../loader-utils/option-utils.js\";\nimport { getArrayBufferOrStringFromData } from \"../loader-utils/get-data.js\";\nimport { getLoaderContext, getLoadersFromContext } from \"../loader-utils/loader-context.js\";\nimport { getResourceUrl } from \"../utils/resource-utils.js\";\nimport { selectLoader } from \"./select-loader.js\";\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\n// implementation signature\nexport async function parse(data, loaders, options, context) {\n    // Signature: parse(data, options, context | url)\n    // Uses registered loaders\n    if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {\n        context = undefined; // context not supported in short signature\n        options = loaders;\n        loaders = undefined;\n    }\n    data = await data; // Resolve any promise\n    options = options || {}; // Could be invalid...\n    // Extract a url for auto detection\n    const url = getResourceUrl(data);\n    // Chooses a loader (and normalizes it)\n    // Also use any loaders in the context, new loaders take priority\n    const typedLoaders = loaders;\n    const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n    // todo hacky type cast\n    const loader = await selectLoader(data, candidateLoaders, options);\n    // Note: if no loader was found, if so just return null\n    if (!loader) {\n        return null;\n    }\n    // Normalize options\n    // @ts-expect-error\n    options = normalizeOptions(options, loader, candidateLoaders, url); // Could be invalid...\n    // Get a context (if already present, will be unchanged)\n    context = getLoaderContext(\n    // @ts-expect-error\n    { url, _parse: parse, loaders: candidateLoaders }, options, context || null);\n    return await parseWithLoader(loader, data, options, context);\n}\n// TODO: support progress and abort\n// TODO - should accept loader.parseAsyncIterator and concatenate.\nasync function parseWithLoader(loader, data, options, context) {\n    validateWorkerVersion(loader);\n    options = mergeLoaderOptions(loader.options, options);\n    if (isResponse(data)) {\n        // Serialize to support passing the response to web worker\n        const response = data;\n        const { ok, redirected, status, statusText, type, url } = response;\n        const headers = Object.fromEntries(response.headers.entries());\n        // @ts-expect-error TODO - fix this\n        context.response = { headers, ok, redirected, status, statusText, type, url };\n    }\n    data = await getArrayBufferOrStringFromData(data, loader, options);\n    const loaderWithParser = loader;\n    // First check for synchronous text parser, wrap results in promises\n    if (loaderWithParser.parseTextSync && typeof data === 'string') {\n        return loaderWithParser.parseTextSync(data, options, context);\n    }\n    // If we have a workerUrl and the loader can parse the given options efficiently in a worker\n    if (canParseWithWorker(loader, options)) {\n        return await parseWithWorker(loader, data, options, context, parse);\n    }\n    // Check for asynchronous parser\n    if (loaderWithParser.parseText && typeof data === 'string') {\n        return await loaderWithParser.parseText(data, options, context);\n    }\n    if (loaderWithParser.parse) {\n        return await loaderWithParser.parse(data, options, context);\n    }\n    // This should not happen, all sync loaders should also offer `parse` function\n    assert(!loaderWithParser.parseSync);\n    // TBD - If asynchronous parser not available, return null\n    throw new Error(`${loader.id} loader - no parser found and worker is disabled`);\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { selectLoaderSync } from \"./select-loader.js\";\nimport { isLoaderObject } from \"../loader-utils/normalize-loader.js\";\nimport { normalizeOptions } from \"../loader-utils/option-utils.js\";\nimport { getArrayBufferOrStringFromDataSync } from \"../loader-utils/get-data.js\";\nimport { getLoaderContext, getLoadersFromContext } from \"../loader-utils/loader-context.js\";\nimport { getResourceUrl } from \"../utils/resource-utils.js\";\n/**\n * Parses `data` synchronously using a specified loader\n */\nexport function parseSync(data, loaders, options, context) {\n    // Signature: parseSync(data, options)\n    // Uses registered loaders\n    if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n        context = undefined; // context not supported in short signature\n        options = loaders;\n        loaders = undefined;\n    }\n    options = options || {};\n    // Chooses a loader (and normalizes it)\n    // Also use any loaders in the context, new loaders take priority\n    const typedLoaders = loaders;\n    const candidateLoaders = getLoadersFromContext(typedLoaders, context);\n    const loader = selectLoaderSync(data, candidateLoaders, options);\n    // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n    if (!loader) {\n        return null;\n    }\n    // Normalize options\n    options = normalizeOptions(options, loader, candidateLoaders);\n    // Extract a url for auto detection\n    const url = getResourceUrl(data);\n    const parse = () => {\n        throw new Error('parseSync called parse (which is async');\n    };\n    context = getLoaderContext({ url, _parseSync: parse, _parse: parse, loaders: loaders }, options, context || null);\n    return parseWithLoaderSync(loader, data, options, context);\n}\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\nfunction parseWithLoaderSync(loader, data, options, context) {\n    data = getArrayBufferOrStringFromDataSync(data, loader, options);\n    if (loader.parseTextSync && typeof data === 'string') {\n        return loader.parseTextSync(data, options); // , context, loader);\n    }\n    if (loader.parseSync && data instanceof ArrayBuffer) {\n        return loader.parseSync(data, options, context); // , loader);\n    }\n    // TBD - If synchronous parser not available, return null\n    throw new Error(`${loader.name} loader: 'parseSync' not supported by this loader, use 'parse' instead. ${context.url || ''}`);\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isTable, makeBatchFromTable } from '@loaders.gl/schema';\nimport { concatenateArrayBuffersAsync } from '@loaders.gl/loader-utils';\nimport { isLoaderObject } from \"../loader-utils/normalize-loader.js\";\nimport { normalizeOptions } from \"../loader-utils/option-utils.js\";\nimport { getLoaderContext } from \"../loader-utils/loader-context.js\";\nimport { getAsyncIterableFromData } from \"../loader-utils/get-data.js\";\nimport { getResourceUrl } from \"../utils/resource-utils.js\";\nimport { selectLoader } from \"./select-loader.js\";\n// Ensure `parse` is available in context if loader falls back to `parse`\nimport { parse } from \"./parse.js\";\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport async function parseInBatches(data, loaders, options, context) {\n    const loaderArray = Array.isArray(loaders) ? loaders : undefined;\n    // Signature: parseInBatches(data, options, url) - Uses registered loaders\n    if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n        context = undefined; // context not supported in short signature\n        options = loaders;\n        loaders = undefined;\n    }\n    data = await data; // Resolve any promise\n    options = options || {};\n    // Extract a url for auto detection\n    const url = getResourceUrl(data);\n    // Chooses a loader and normalizes it\n    // Note - only uses URL and contentType for streams and iterator inputs\n    const loader = await selectLoader(data, loaders, options);\n    // Note: if options.nothrow was set, it is possible that no loader was found, if so just return null\n    if (!loader) {\n        return [];\n    }\n    // Normalize options\n    options = normalizeOptions(options, loader, loaderArray, url);\n    context = getLoaderContext({ url, _parseInBatches: parseInBatches, _parse: parse, loaders: loaderArray }, options, context || null);\n    return await parseWithLoaderInBatches(loader, data, options, context);\n}\n/**\n * Loader has been selected and context has been prepared, see if we need to emit a metadata batch\n */\nasync function parseWithLoaderInBatches(loader, data, options, context) {\n    const outputIterator = await parseToOutputIterator(loader, data, options, context);\n    // Generate metadata batch if requested\n    if (!options.metadata) {\n        return outputIterator;\n    }\n    const metadataBatch = {\n        shape: 'metadata',\n        batchType: 'metadata',\n        metadata: {\n            _loader: loader,\n            _context: context\n        },\n        // Populate with some default fields to avoid crashing\n        data: [],\n        bytesUsed: 0\n    };\n    async function* makeMetadataBatchIterator(iterator) {\n        yield metadataBatch;\n        yield* iterator;\n    }\n    return makeMetadataBatchIterator(outputIterator);\n}\n/**\n * Prep work is done, now it is time to start parsing into an output operator\n * The approach depends on which parse function the loader exposes\n * `parseInBatches` (preferred), `parse` (fallback)\n */\nasync function parseToOutputIterator(loader, data, options, context) {\n    // Get an iterator from the input\n    const inputIterator = await getAsyncIterableFromData(data, options);\n    // Apply any iterator transforms (options.transforms)\n    const transformedIterator = await applyInputTransforms(inputIterator, options?.transforms || []);\n    // If loader supports parseInBatches, we are done\n    if (loader.parseInBatches) {\n        return loader.parseInBatches(transformedIterator, options, context);\n    }\n    return parseChunkInBatches(transformedIterator, loader, options, context);\n}\n// Fallback: load atomically using `parse` concatenating input iterator into single chunk\nasync function* parseChunkInBatches(transformedIterator, loader, options, context) {\n    const arrayBuffer = await concatenateArrayBuffersAsync(transformedIterator);\n    // Call `parse` instead of `loader.parse` to ensure we can call workers etc.\n    const parsedData = await parse(arrayBuffer, loader, \n    // TODO - Hack: supply loaders MIME type to ensure we match it\n    { ...options, mimeType: loader.mimeTypes[0] }, context);\n    // yield a single batch, the output from loader.parse() repackaged as a batch\n    const batch = convertDataToBatch(parsedData, loader);\n    yield batch;\n}\n/**\n * Convert parsed data into a single batch\n * @todo run through batch builder to apply options etc...\n */\nfunction convertDataToBatch(parsedData, loader) {\n    // prettier-ignore\n    const batch = isTable(parsedData)\n        ? makeBatchFromTable(parsedData)\n        : {\n            shape: 'unknown',\n            batchType: 'data',\n            data: parsedData,\n            length: Array.isArray(parsedData) ? parsedData.length : 1\n        };\n    batch.mimeType = loader.mimeTypes[0];\n    return batch;\n}\n/**\n * Create an iterator chain with any transform iterators (crypto, decompression)\n * @param inputIterator\n * @param options\n */\nasync function applyInputTransforms(inputIterator, transforms = []) {\n    let iteratorChain = inputIterator;\n    for await (const transformBatches of transforms) {\n        iteratorChain = transformBatches(iteratorChain);\n    }\n    return iteratorChain;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isBlob } from \"../../javascript-utils/is-type.js\";\nimport { isLoaderObject } from \"../loader-utils/normalize-loader.js\";\nimport { getFetchFunction } from \"../loader-utils/get-fetch-function.js\";\nimport { parse } from \"./parse.js\";\n// export async function load(url: string | DataType, loaders: LoaderOptions): Promise<any>;\n// implementation signature\nexport async function load(url, loaders, options, context) {\n    let resolvedLoaders;\n    let resolvedOptions;\n    // Signature: load(url, options)\n    if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n        resolvedLoaders = [];\n        resolvedOptions = loaders;\n        context = undefined; // context not supported in short signature\n    }\n    else {\n        resolvedLoaders = loaders;\n        resolvedOptions = options;\n    }\n    // Select fetch function\n    const fetch = getFetchFunction(resolvedOptions);\n    // at this point, `url` could be already loaded binary data\n    let data = url;\n    // url is a string, fetch the url\n    if (typeof url === 'string') {\n        data = await fetch(url);\n        // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\n    }\n    if (isBlob(url)) {\n        // The fetch response object will contain blob.name\n        // @ts-expect-error TODO - This may not work for overridden fetch functions\n        data = await fetch(url);\n    }\n    // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\n    // return await parse(data, loaders as Loader[], options);\n    return Array.isArray(resolvedLoaders)\n        ? await parse(data, resolvedLoaders, resolvedOptions) // loader array overload\n        : await parse(data, resolvedLoaders, resolvedOptions); // single loader overload\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { isLoaderObject } from \"../loader-utils/normalize-loader.js\";\nimport { getFetchFunction } from \"../loader-utils/get-fetch-function.js\";\nimport { parseInBatches } from \"./parse-in-batches.js\";\nexport function loadInBatches(files, loaders, options, context) {\n    let loadersArray;\n    // Signature: load(url, options)\n    if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n        context = undefined; // context not supported in short signature\n        options = loaders;\n        loadersArray = undefined;\n    }\n    else {\n        loadersArray = loaders;\n    }\n    // Select fetch function\n    const fetch = getFetchFunction(options || {});\n    // Single url/file\n    if (!Array.isArray(files)) {\n        return loadOneFileInBatches(files, loadersArray, options || {}, fetch);\n    }\n    // Multiple URLs / files\n    const promises = files.map((file) => loadOneFileInBatches(file, loadersArray, options || {}, fetch));\n    // No point in waiting here for all responses before starting to stream individual streams?\n    return promises;\n}\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n    if (typeof file === 'string') {\n        const url = file;\n        const response = await fetch(url);\n        // pick right overload\n        return Array.isArray(loaders)\n            ? await parseInBatches(response, loaders, options)\n            : await parseInBatches(response, loaders, options);\n    }\n    // pick right overload\n    return Array.isArray(loaders)\n        ? await parseInBatches(file, loaders, options)\n        : await parseInBatches(file, loaders, options);\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Copyright 2022 Foursquare Labs, Inc\n/* global TextEncoder, TextDecoder */\nimport { concatenateArrayBuffers } from '@loaders.gl/loader-utils';\nexport async function encodeTable(data, writer, options) {\n    if (writer.encode) {\n        return await writer.encode(data, options);\n    }\n    if (writer.encodeText) {\n        const text = await writer.encodeText(data, options);\n        return new TextEncoder().encode(text);\n    }\n    if (writer.encodeInBatches) {\n        // Create an iterator representing the data\n        // TODO - Assumes this is a table\n        const batches = encodeTableInBatches(data, writer, options);\n        // Concatenate the output\n        const chunks = [];\n        for await (const batch of batches) {\n            chunks.push(batch);\n        }\n        return concatenateArrayBuffers(...chunks);\n    }\n    throw new Error('Writer could not encode data');\n}\nexport async function encodeTableAsText(data, writer, options) {\n    if (writer.text && writer.encodeText) {\n        return await writer.encodeText(data, options);\n    }\n    if (writer.text) {\n        const arrayBuffer = await encodeTable(data, writer, options);\n        return new TextDecoder().decode(arrayBuffer);\n    }\n    throw new Error(`Writer ${writer.name} could not encode data as text`);\n}\nexport function encodeTableInBatches(data, writer, options) {\n    if (writer.encodeInBatches) {\n        const dataIterator = getIterator(data);\n        // @ts-expect-error\n        return writer.encodeInBatches(dataIterator, options);\n    }\n    // TODO -fall back to atomic encode?\n    throw new Error('Writer could not encode data in batches');\n}\nfunction getIterator(data) {\n    const dataIterator = [{ ...data, start: 0, end: data.length }];\n    return dataIterator;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { canEncodeWithWorker, NodeFile, resolvePath, isBrowser } from '@loaders.gl/loader-utils';\nimport { processOnWorker } from '@loaders.gl/worker-utils';\nimport { fetchFile } from \"../fetch/fetch-file.js\";\nimport { getLoaderOptions } from \"./loader-options.js\";\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport async function encode(data, writer, options_) {\n    const globalOptions = getLoaderOptions();\n    // const globalOptions: WriterOptions = {}; // getWriterOptions();\n    const options = { ...globalOptions, ...options_ };\n    // Handle the special case where we are invoking external command-line tools\n    if (writer.encodeURLtoURL) {\n        return encodeWithCommandLineTool(writer, data, options);\n    }\n    // Worker support\n    if (canEncodeWithWorker(writer, options)) {\n        return await processOnWorker(writer, data, options);\n    }\n    // TODO Merge default writer options with options argument like it is done in load module.\n    return await writer.encode(data, options);\n}\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport function encodeSync(data, writer, options) {\n    if (writer.encodeSync) {\n        return writer.encodeSync(data, options);\n    }\n    if (writer.encodeTextSync) {\n        return new TextEncoder().encode(writer.encodeTextSync(data, options));\n    }\n    throw new Error(`Writer ${writer.name} could not synchronously encode data`);\n}\n/**\n * Encode loaded data to text using the specified Writer\n * @note This is a convenience function not intended for production use on large input data.\n * It is not optimized for performance. Data maybe converted from text to binary and back.\n * @throws if the writer does not generate text output\n */\nexport async function encodeText(data, writer, options) {\n    if (writer.encodeText) {\n        return await writer.encodeText(data, options);\n    }\n    if (writer.encodeTextSync) {\n        return writer.encodeTextSync(data, options);\n    }\n    if (writer.text) {\n        const arrayBuffer = await writer.encode(data, options);\n        return new TextDecoder().decode(arrayBuffer);\n    }\n    throw new Error(`Writer ${writer.name} could not encode data as text`);\n}\n/**\n * Encode loaded data to text using the specified Writer\n * @note This is a convenience function not intended for production use on large input data.\n * It is not optimized for performance. Data maybe converted from text to binary and back.\n * @throws if the writer does not generate text output\n */\nexport function encodeTextSync(data, writer, options) {\n    if (writer.encodeTextSync) {\n        return writer.encodeTextSync(data, options);\n    }\n    if (writer.text && writer.encodeSync) {\n        const arrayBuffer = encodeSync(data, writer, options);\n        return new TextDecoder().decode(arrayBuffer);\n    }\n    throw new Error(`Writer ${writer.name} could not encode data as text`);\n}\n/**\n * Encode loaded data into a sequence (iterator) of binary ArrayBuffers using the specified Writer.\n */\nexport function encodeInBatches(data, writer, options) {\n    if (writer.encodeInBatches) {\n        const dataIterator = getIterator(data);\n        // @ts-expect-error\n        return writer.encodeInBatches(dataIterator, options);\n    }\n    // TODO -fall back to atomic encode?\n    throw new Error(`Writer ${writer.name} could not encode in batches`);\n}\n/**\n * Encode loaded data into a sequence (iterator) of binary ArrayBuffers using the specified Writer.\n */\nexport function encodeTextInBatches(data, writer, options) {\n    if (writer.encodeTextInBatches) {\n        const dataIterator = getIterator(data);\n        // @ts-expect-error\n        return writer.encodeTextInBatches(dataIterator, options);\n    }\n    // TODO -fall back to atomic encode?\n    throw new Error(`Writer ${writer.name} could not encode text in batches`);\n}\n/**\n * Encode data stored in a file (on disk) to another file.\n * @note Node.js only. This function enables using command-line converters as \"writers\".\n */\nexport async function encodeURLtoURL(inputUrl, outputUrl, writer, options) {\n    inputUrl = resolvePath(inputUrl);\n    outputUrl = resolvePath(outputUrl);\n    if (isBrowser || !writer.encodeURLtoURL) {\n        throw new Error();\n    }\n    const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n    return outputFilename;\n}\n/** Helper function to encode via external tool (typically command line execution in Node.js) */\nasync function encodeWithCommandLineTool(writer, data, options) {\n    if (isBrowser) {\n        throw new Error(`Writer ${writer.name} not supported in browser`);\n    }\n    // TODO - how to generate filenames with correct extensions?\n    const tmpInputFilename = getTemporaryFilename('input');\n    const file = new NodeFile(tmpInputFilename, 'w');\n    await file.write(data);\n    const tmpOutputFilename = getTemporaryFilename('output');\n    const outputFilename = await encodeURLtoURL(tmpInputFilename, tmpOutputFilename, writer, options);\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n}\n/**\n * @todo TODO - this is an unacceptable hack!!!\n */\nfunction getIterator(data) {\n    const dataIterator = [{ ...data, start: 0, end: data.length }];\n    return dataIterator;\n}\n/**\n * @todo Move to utils\n */\nfunction getTemporaryFilename(filename) {\n    return `/tmp/${filename}`;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Creates a source from a service\n * If type is not supplied, will try to automatically detect the the\n * @param url URL to the data source\n * @param type type of source. if not known, set to 'auto'\n * @returns an DataSource instance\n */\nexport function createDataSource(data, sources, props) {\n    const { type = 'auto' } = props;\n    const source = type === 'auto' ? selectSource(data, sources) : getSourceOfType(type, sources);\n    if (!source) {\n        throw new Error('Not a valid image source type');\n    }\n    return source.createDataSource(data, props);\n}\n// TODO - use selectSource...\n/** Guess service type from URL */\nfunction selectSource(url, sources) {\n    for (const service of sources) {\n        // @ts-expect-error\n        if (service.testURL && service.testURL(url)) {\n            return service;\n        }\n    }\n    return null;\n}\n/** Guess service type from URL */\nfunction getSourceOfType(type, sources) {\n    for (const service of sources) {\n        if (service.type === type) {\n            return service;\n        }\n    }\n    return null;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/** Guess service type from URL */\nexport function selectSource(url, sources, options) {\n    const type = options?.type || 'auto';\n    let selectedSource = null;\n    if (type === 'auto') {\n        for (const source of sources) {\n            if (typeof url === 'string' && source.testURL && source.testURL(url)) {\n                return source;\n            }\n        }\n    }\n    else {\n        selectedSource = getSourceOfType(type, sources);\n    }\n    if (!selectedSource && !options?.nothrow) {\n        throw new Error('Not a valid image source type');\n    }\n    return selectedSource;\n}\n/** Guess service type from URL */\nfunction getSourceOfType(type, sources) {\n    for (const service of sources) {\n        if (service.type === type) {\n            return service;\n        }\n    }\n    return null;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n/**\n * Builds a DOM stream from an iterator\n * This stream is currently used in browsers only,\n * but note that Web stream support is present in Node from Node 16\n * https://nodejs.org/api/webstreams.html#webstreams_web_streams_api\n */\nexport function makeStream(source, options) {\n    if (globalThis.loaders.makeNodeStream) {\n        return globalThis.loaders.makeNodeStream(source, options);\n    }\n    // TODO - add AsyncGenerator to parameter types?\n    const iterator = source[Symbol.asyncIterator]\n        ? source[Symbol.asyncIterator]()\n        : source[Symbol.iterator]();\n    return new ReadableStream({\n        // Create a byte stream (enables `Response(stream).arrayBuffer()`)\n        // Only supported on Chrome\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\n        // @ts-ignore\n        type: 'bytes',\n        async pull(controller) {\n            try {\n                const { done, value } = await iterator.next();\n                if (done) {\n                    controller.close();\n                }\n                else {\n                    // TODO - ignores controller.desiredSize\n                    // @ts-expect-error Unclear why value is not correctly typed\n                    controller.enqueue(new Uint8Array(value));\n                }\n            }\n            catch (error) {\n                controller.error(error);\n            }\n        },\n        async cancel() {\n            await iterator?.return?.();\n        }\n    }, \n    // options: QueingStrategy<Uint8Array>\n    {\n        // This is bytes, not chunks\n        highWaterMark: 2 ** 24,\n        ...options\n    });\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof \"4.3.2\" !== 'undefined' ? \"4.3.2\" : 'latest';\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullWorkerLoader = {\n    dataType: null,\n    batchType: null,\n    name: 'Null loader',\n    id: 'null',\n    module: 'core',\n    version: VERSION,\n    worker: true,\n    mimeTypes: ['application/x.empty'],\n    extensions: ['null'],\n    tests: [() => false],\n    options: {\n        null: {}\n    }\n};\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullLoader = {\n    dataType: null,\n    batchType: null,\n    name: 'Null loader',\n    id: 'null',\n    module: 'core',\n    version: VERSION,\n    mimeTypes: ['application/x.empty'],\n    extensions: ['null'],\n    parse: async (arrayBuffer, options, context) => parseSync(arrayBuffer, options || {}, context),\n    parseSync,\n    parseInBatches: async function* generator(asyncIterator, options, context) {\n        for await (const batch of asyncIterator) {\n            yield parseSync(batch, options, context);\n        }\n    },\n    tests: [() => false],\n    options: {\n        null: {}\n    }\n};\n/**\n * Returns arguments passed to the parse API in a format that can be transferred to a\n * web worker. The `context` parameter is stripped using JSON.stringify & parse.\n */\nfunction parseSync(arrayBuffer, options, context) {\n    return null;\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n// Forked from github AnthumChris/fetch-progress-indicators under MIT license\n/**\n * Intercepts the Response stream and creates a new Response\n */\nexport async function fetchProgress(response, onProgress, // TODO better callback types\nonDone = () => { }, onError = () => { }) {\n    response = await response;\n    if (!response.ok) {\n        // ERROR checking needs to be done separately\n        return response;\n    }\n    const body = response.body;\n    if (!body) {\n        // 'ReadableStream not yet supported in this browser.\n        return response;\n    }\n    const contentLength = response.headers.get('content-length') || 0;\n    const totalBytes = contentLength ? parseInt(contentLength) : 0;\n    if (!(totalBytes > 0)) {\n        return response;\n    }\n    // Currently override only implemented in browser\n    if (typeof ReadableStream === 'undefined' || !body.getReader) {\n        return response;\n    }\n    // Create a new stream that invisbly wraps original stream\n    const progressStream = new ReadableStream({\n        async start(controller) {\n            const reader = body.getReader();\n            await read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n        }\n    });\n    return new Response(progressStream);\n}\n// Forward to original streams controller\n// TODO - this causes a crazy deep \"async stack\"... rewrite as async iterator?\n// eslint-disable-next-line max-params\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n    try {\n        const { done, value } = await reader.read();\n        if (done) {\n            onDone();\n            controller.close();\n            return;\n        }\n        loadedBytes += value.byteLength;\n        const percent = Math.round((loadedBytes / totalBytes) * 100);\n        onProgress(percent, { loadedBytes, totalBytes });\n        controller.enqueue(value);\n        await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n    }\n    catch (error) {\n        controller.error(error);\n        onError(error);\n    }\n}\n", "// loaders.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nimport { BlobFile } from '@loaders.gl/loader-utils';\n/**\n * FileSystem adapter for a browser FileList.\n * Holds a list of browser 'File' objects.\n */\nexport class BrowserFileSystem {\n    _fetch;\n    files = {};\n    lowerCaseFiles = {};\n    usedFiles = {};\n    /**\n     * A FileSystem API wrapper around a list of browser 'File' objects\n     * @param files\n     * @param options\n     */\n    constructor(files, options) {\n        this._fetch = options?.fetch || fetch;\n        for (let i = 0; i < files.length; ++i) {\n            const file = files[i];\n            this.files[file.name] = file;\n            this.lowerCaseFiles[file.name.toLowerCase()] = file;\n            this.usedFiles[file.name] = false;\n        }\n        this.fetch = this.fetch.bind(this);\n    }\n    // implements IFileSystem\n    /**\n     * Implementation of fetch against this file system\n     * Delegates to global fetch for http{s}:// or data://\n     */\n    async fetch(path, options) {\n        // Fallback to handle https:/http:/data: etc fetches\n        if (path.includes('://')) {\n            return this._fetch(path, options);\n        }\n        // Local fetches are served from the list of files\n        const file = this.files[path];\n        if (!file) {\n            return new Response(path, { status: 400, statusText: 'NOT FOUND' });\n        }\n        const headers = new Headers(options?.headers);\n        const range = headers.get('Range');\n        const bytes = range && /bytes=($1)-($2)/.exec(range);\n        if (bytes) {\n            const start = parseInt(bytes[1]);\n            const end = parseInt(bytes[2]);\n            // The trick when reading File objects is to read successive \"slices\" of the File\n            // Per spec https://w3c.github.io/FileAPI/, slicing a File should only update the start and end fields\n            // Actually reading from file should happen in `readAsArrayBuffer` (and as far we can tell it does)\n            const data = await file.slice(start, end).arrayBuffer();\n            const response = new Response(data);\n            Object.defineProperty(response, 'url', { value: path });\n            return response;\n        }\n        // return makeResponse()\n        const response = new Response(file);\n        Object.defineProperty(response, 'url', { value: path });\n        return response;\n    }\n    /**\n     * List filenames in this filesystem\n     * @param dirname\n     * @returns\n     */\n    async readdir(dirname) {\n        const files = [];\n        for (const path in this.files) {\n            files.push(path);\n        }\n        // TODO filter by dirname\n        return files;\n    }\n    /**\n     * Return information (size) about files in this file system\n     */\n    async stat(path, options) {\n        const file = this.files[path];\n        if (!file) {\n            throw new Error(path);\n        }\n        return { size: file.size };\n    }\n    /**\n     * Just removes the file from the list\n     */\n    async unlink(path) {\n        delete this.files[path];\n        delete this.lowerCaseFiles[path];\n        this.usedFiles[path] = true;\n    }\n    // implements IRandomAccessFileSystem\n    // RANDOM ACCESS\n    async openReadableFile(pathname, flags) {\n        return new BlobFile(this.files[pathname]);\n    }\n    // PRIVATE\n    // Supports case independent paths, and file usage tracking\n    _getFile(path, used) {\n        // Prefer case match, but fall back to case independent.\n        const file = this.files[path] || this.lowerCaseFiles[path];\n        if (file && used) {\n            this.usedFiles[path] = true;\n        }\n        return file;\n    }\n}\n/*\n   * Read a range into a buffer\n   * @todo - handle position memory\n   * @param buffer is the buffer that the data (read from the fd) will be written to.\n   * @param offset is the offset in the buffer to start writing at.\n   * @param length is an integer specifying the number of bytes to read.\n   * @param position is an argument specifying where to begin reading from in the file. If position is null, data will be read from the current file position, and the file position will be updated. If position is an integer, the file position will remain unchanged.\n   *\n  async read(\n    fd: any,\n    buffer: ArrayBuffer,\n    offset: number = 0,\n    length: number = buffer.byteLength,\n    position: number | null = null\n  ): Promise<{bytesRead: number; buffer: ArrayBuffer}> {\n    const file = fd as File;\n    const startPosition = 0; // position\n    const arrayBuffer = await file.slice(startPosition, startPosition + length).arrayBuffer();\n    // copy into target buffer\n    return {bytesRead: length, buffer: arrayBuffer};\n  }\n\n  async close(fd: number): Promise<void> {\n    // NO OP\n  }\n\n  // fstat(fd: number): Promise<object>; // Stat\n  */\n"],
  "mappings": "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",
  "names": ["window_", "document_", "isBrowser", "isBrowser", "COLOR", "isBrowser", "assert", "isBrowser", "window_", "isBrowser", "assert", "VERSION", "log", "VERSION", "assert", "globals", "self_", "window_", "global_", "document_", "isBrowser", "isWorker", "isMobile", "matches", "nodeVersion", "resolve", "assert", "assert", "assert", "isBrowser", "onMessage", "isBrowser", "isMobile", "VERSION", "isBrowser", "version", "assert", "VERSION", "assert", "isBrowser", "assert", "VERSION", "isWorker", "ChildProcess", "isBrowser", "onMessage", "getHiResTimestamp", "getHiResTimestamp", "DEFAULT_PROPS", "resolve", "filename", "VERSION", "toArrayBuffer", "NOT_IMPLEMENTED", "fetchOptions", "isBuffer", "matches", "matches", "resolve", "resolve", "getFirstCharacters", "getMagicString", "DEFAULT_CHUNK_SIZE", "DEFAULT_CHUNK_SIZE", "toArrayBuffer", "isBuffer", "getFetchFunction", "getFetchFunction", "assert", "parse", "fetch", "getFetchFunction", "fetch", "getFetchFunction", "getIterator", "getIterator", "filename", "selectSource", "getSourceOfType", "VERSION", "parseSync", "response", "dirname"]
}
